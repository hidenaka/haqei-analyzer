#!/usr/bin/env node
const { chromium } = require('playwright');

async function debugConsoleCheck() {
  console.log('üîç Console ErrorË™øÊüª - „Éá„Éº„Çø„Éô„Éº„Çπ„Å®JavaScriptÂïèÈ°åÁ¢∫Ë™ç');
  
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();
  
  // Console„É°„ÉÉ„Çª„Éº„Ç∏Áõ£Ë¶ñ
  page.on('console', msg => {
    console.log(`üìã Console [${msg.type()}]:`, msg.text());
  });
  
  // „Ç®„É©„ÉºÁõ£Ë¶ñ
  page.on('pageerror', error => {
    console.error(`‚ùå Page Error:`, error.message);
  });
  
  try {
    await page.goto('http://localhost:8788/os_analyzer.html');
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
    
    // „Éá„Éº„Çø„Éô„Éº„ÇπË™≠„ÅøËæº„ÅøÁ¢∫Ë™ç
    const databaseCheck = await page.evaluate(() => {
      return {
        hexagrams: typeof HEXAGRAMS !== 'undefined' ? HEXAGRAMS.length : 'undefined',
        h384: typeof H384_DATA !== 'undefined' ? H384_DATA.length : 'undefined',
        startAnalysis: typeof startAnalysis !== 'undefined'
      };
    });
    
    console.log('üìä „Éá„Éº„Çø„Éô„Éº„ÇπÁä∂Ê≥Å:', databaseCheck);
    
    // ÈñãÂßã„Éú„Çø„É≥„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç
    const buttonCheck = await page.evaluate(() => {
      const button = document.querySelector('button');
      return {
        exists: !!button,
        text: button?.textContent,
        onclick: button?.onclick?.toString(),
        disabled: button?.disabled
      };
    });
    
    console.log('üîò ÈñãÂßã„Éú„Çø„É≥Áä∂Ê≥Å:', buttonCheck);
    
    // ÊâãÂãï„ÅßÈñãÂßãÈñ¢Êï∞„ÇíÂÆüË°å
    console.log('üöÄ ÊâãÂãï„ÅßstartAnalysis()ÂÆüË°å...');
    await page.evaluate(() => {
      if (typeof startAnalysis === 'function') {
        startAnalysis();
      } else {
        console.error('startAnalysis function not found');
      }
    });
    
    await page.waitForTimeout(3000);
    await page.screenshot({ path: 'debug-after-manual-start.png', fullPage: true });
    
    // 15ÁßíÂæÖÊ©ü
    await page.waitForTimeout(15000);
    
  } catch (error) {
    console.error('‚ùå Debug Error:', error.message);
  } finally {
    await browser.close();
  }
}

debugConsoleCheck();