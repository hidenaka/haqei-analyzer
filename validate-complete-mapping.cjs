const fs = require('fs');

// „Çπ„Ç≠„Éº„ÉûË™≠„ÅøËæº„Åø
const schema = JSON.parse(fs.readFileSync('/Users/hideakimacbookair/Desktop/haqei-analyzer/config/kingwen-mapping.schema.json', 'utf8'));
const completeMapping = JSON.parse(fs.readFileSync('/Users/hideakimacbookair/Desktop/haqei-analyzer/config/kingwen-mapping-complete.json', 'utf8'));

console.log('üîç Validating complete 64-hexagram mapping...\n');

let errors = 0;
let warnings = 0;

// Âü∫Êú¨ÊßãÈÄ†Ê§úË®º
if (!completeMapping.hexagrams || typeof completeMapping.hexagrams !== 'object') {
  console.error('‚ùå Missing hexagrams object');
  errors++;
}

const hexagramCount = Object.keys(completeMapping.hexagrams).length;
console.log(`üìä Total hexagrams: ${hexagramCount}`);

if (hexagramCount !== 64) {
  console.error('‚ùå Expected 64 hexagrams, found', hexagramCount);
  errors++;
} else {
  console.log('‚úÖ Correct hexagram count');
}

// ÂêÑÂç¶„ÅÆÊ§úË®º
Object.entries(completeMapping.hexagrams).forEach(([num, hex]) => {
  const hexNum = parseInt(num);
  
  // Âü∫Êú¨„Éï„Ç£„Éº„É´„ÉâÊ§úË®º
  if (!hex.name || typeof hex.name !== 'string') {
    console.error(`‚ùå Hexagram ${num}: Missing or invalid name`);
    errors++;
  }
  
  if (!Array.isArray(hex.lines) || hex.lines.length !== 6) {
    console.error(`‚ùå Hexagram ${num}: Invalid lines array`);
    errors++;
  } else {
    // Á∑ö„ÅÆÂÄ§Ê§úË®º
    const validLines = hex.lines.every(line => line === 0 || line === 1);
    if (!validLines) {
      console.error(`‚ùå Hexagram ${num}: Lines must be 0 or 1`);
      errors++;
    }
  }
  
  if (!Array.isArray(hex.trigrams) || hex.trigrams.length !== 2) {
    console.error(`‚ùå Hexagram ${num}: Invalid trigrams array`);
    errors++;
  } else {
    // ÂÖ´Âç¶ÂêçÊ§úË®º
    const validTrigrams = ['‰πæ', 'Âù§', 'Èúá', 'Âùé', 'ËâÆ', 'Â∑Ω', 'Èõ¢', 'ÂÖå'];
    hex.trigrams.forEach((trigram, i) => {
      if (!validTrigrams.includes(trigram)) {
        if (trigram === 'unknown') {
          console.warn(`‚ö†Ô∏è Hexagram ${num}: Unknown trigram at position ${i}`);
          warnings++;
        } else {
          console.error(`‚ùå Hexagram ${num}: Invalid trigram "${trigram}" at position ${i}`);
          errors++;
        }
      }
    });
  }
});

// King WenÈ†ÜÂ∫èÊ§úË®º
console.log('\nüî¢ Checking King Wen sequence...');
const expectedNumbers = Array.from({length: 64}, (_, i) => i + 1);
const actualNumbers = Object.keys(completeMapping.hexagrams).map(n => parseInt(n)).sort((a, b) => a - b);

if (JSON.stringify(expectedNumbers) === JSON.stringify(actualNumbers)) {
  console.log('‚úÖ All 64 hexagrams in correct King Wen sequence');
} else {
  console.error('‚ùå Missing hexagrams in King Wen sequence');
  const missing = expectedNumbers.filter(n => !actualNumbers.includes(n));
  if (missing.length > 0) {
    console.error(`Missing: ${missing.join(', ')}`);
    errors++;
  }
}

// ÁâπÂÆö„ÅÆÈáçË¶Å„Å™Âç¶„ÅÆÊ§úË®º
console.log('\nüéØ Checking critical hexagrams...');
const criticalHexagrams = [
  { num: 1, name: '‰πæÁÇ∫Â§©', trigrams: ['‰πæ', '‰πæ'] },
  { num: 2, name: 'Âù§ÁÇ∫Âú∞', trigrams: ['Âù§', 'Âù§'] },
  { num: 11, name: 'Âú∞Â§©Ê≥∞', trigrams: ['Âù§', '‰πæ'] },
  { num: 12, name: 'Â§©Âú∞Âê¶', trigrams: ['‰πæ', 'Âù§'] },
  { num: 63, name: 'Ê∞¥ÁÅ´Êó¢Ê∏à', trigrams: ['Âùé', 'Èõ¢'] },
  { num: 64, name: 'ÁÅ´Ê∞¥Êú™Ê∏à', trigrams: ['Èõ¢', 'Âùé'] }
];

criticalHexagrams.forEach(expected => {
  const actual = completeMapping.hexagrams[expected.num];
  if (actual) {
    if (actual.name === expected.name && 
        JSON.stringify(actual.trigrams) === JSON.stringify(expected.trigrams)) {
      console.log(`‚úÖ Hexagram ${expected.num}: ${expected.name} - correct`);
    } else {
      console.log(`üîç Hexagram ${expected.num}: Expected ${expected.name}, got ${actual.name}`);
      console.log(`   Trigrams: expected [${expected.trigrams.join(',')}], got [${actual.trigrams.join(',')}]`);
      if (actual.name !== expected.name) {
        console.error(`‚ùå Hexagram ${expected.num}: Name mismatch`);
        errors++;
      }
      if (JSON.stringify(actual.trigrams) !== JSON.stringify(expected.trigrams)) {
        console.error(`‚ùå Hexagram ${expected.num}: Trigram mismatch`);
        errors++;
      }
    }
  }
});

// ÁµêÊûú„Çµ„Éû„É™„Éº
console.log('\n=== Validation Summary ===');
console.log(`‚úÖ Successes: ${64 - errors} hexagrams`);
if (warnings > 0) console.log(`‚ö†Ô∏è Warnings: ${warnings}`);
if (errors > 0) {
  console.log(`‚ùå Errors: ${errors}`);
  console.log('‚ùå Validation FAILED');
  process.exit(1);
} else {
  console.log('‚úÖ Validation PASSED - Ready for production use!');
}