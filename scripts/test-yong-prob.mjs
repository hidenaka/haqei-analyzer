#!/usr/bin/env node
/**
 * Áî®‰πù/Áî®ÂÖ≠Á®ÄÂ∞ë‰∫ãË±°Ê§úÂÆö„Çπ„ÇØ„É™„Éó„Éà
 * v4.3.1 - „Éù„Ç¢„ÇΩ„É≥Ëøë‰ºº„Å®Ê≠£Á¢∫‰∫åÈ†ÖÊ§úÂÆö„Å´„Çà„ÇãÈÅ©Ê≠£Âåñ
 * 
 * Ëá¥ÂëΩÂ∫¶High‰øÆÊ≠£: Ê≠£Ë¶èËøë‰ºº„Åã„ÇâÈÅ©Âàá„Å™Áµ±Ë®àÊâãÊ≥ï„Å∏„ÅÆÂ§âÊõ¥
 */

import fs from 'node:fs/promises';
import path from 'node:path';

const N = Number(process.argv[2] || 1000000);  // Ë¶≥Ê∏¨ÂõûÊï∞
const x = Number(process.argv[3] || 0);        // Ë¶≥Ê∏¨„Éí„ÉÉ„ÉàÊï∞
const p0 = 7.62939453125e-6;                  // ÁêÜË´ñÁ¢∫Áéá

console.log(`üßÆ Yong Overlay Statistical Test (N=${N}, x=${x})\n`);

// „Éù„Ç¢„ÇΩ„É≥Ëøë‰ºº„Éë„É©„É°„Éº„Çø
const lambda = N * p0;
console.log(`üìä Parameters:`);
console.log(`   Theoretical probability (p0): ${p0.toExponential(3)}`);
console.log(`   Expected occurrences (Œª): ${lambda.toFixed(3)}`);
console.log(`   Per million trials: ${(p0 * 1e6).toFixed(2)} times\n`);

// „Éù„Ç¢„ÇΩ„É≥ÂàÜÂ∏É„ÅÆÁ¢∫ÁéáË≥™ÈáèÈñ¢Êï∞
const poissonPMF = (k, lambda) => {
  if (k === 0) return Math.exp(-lambda);
  
  let result = Math.exp(-lambda);
  for (let i = 1; i <= k; i++) {
    result *= lambda / i;
  }
  return result;
};

// „Éù„Ç¢„ÇΩ„É≥ÂàÜÂ∏É„ÅÆÁ¥ØÁ©çÂàÜÂ∏ÉÈñ¢Êï∞Ôºà‰∏ãÂÅ¥Ôºâ
const poissonCDF = (k, lambda) => {
  let sum = 0;
  for (let i = 0; i <= k; i++) {
    sum += poissonPMF(i, lambda);
  }
  return sum;
};

// „Éù„Ç¢„ÇΩ„É≥ÂàÜÂ∏É„ÅÆÁ¥ØÁ©çÂàÜÂ∏ÉÈñ¢Êï∞Ôºà‰∏äÂÅ¥Ôºâ
const poissonCCDF = (k, lambda) => {
  return 1 - poissonCDF(k - 1, lambda);
};

// 1. „Çº„É≠Ë¶≥Ê∏¨„ÅÆÁâπÂà•Ê§úÊüª
console.log(`üîç Zero Observation Analysis:`);
const pZero = Math.exp(-lambda);
console.log(`   P(X = 0 | Œª = ${lambda.toFixed(3)}) = ${pZero.toFixed(6)} (${(pZero * 100).toFixed(3)}%)`);

if (x === 0) {
  console.log(`   Interpretation: ${pZero < 0.001 ? '‚ö†Ô∏è  SUSPICIOUS' : '‚úÖ NORMAL'}`);
  if (pZero < 0.001) {
    console.warn(`   Warning: Zero hits with probability ${(pZero * 100).toFixed(3)}% suggests possible underflow`);
  }
} else {
  console.log(`   Note: Observed ${x} hits (not zero case)`);
}
console.log();

// 2. Ê≠£Á¢∫„Éù„Ç¢„ÇΩ„É≥Ê§úÂÆö
console.log(`üìà Exact Poisson Test (Œª = ${lambda.toFixed(3)}):`);

if (x === 0) {
  // „Çº„É≠Ë¶≥Ê∏¨„ÅÆÂ†¥Âêà„ÅØ‰∏äÂÅ¥Ê§úÂÆö„ÅÆ„ÅøÊÑèÂë≥„Åå„ÅÇ„Çã
  const pValueUpper = 1.0; // P(X ‚â• 0) = 1
  console.log(`   P(X ‚â• ${x}) = ${pValueUpper.toFixed(6)} (upper tail)`);
  console.log(`   Note: Zero observation always has upper p-value = 1.0`);
} else if (x <= lambda) {
  // Ë¶≥Ê∏¨ÂÄ§„ÅåÊúüÂæÖÂÄ§‰ª•‰∏ã„ÅÆÂ†¥ÂêàÔºö‰∏ãÂÅ¥Ê§úÂÆö
  const pValueLower = poissonCDF(x, lambda);
  console.log(`   P(X ‚â§ ${x}) = ${pValueLower.toFixed(6)} (lower tail)`);
  console.log(`   Two-sided p-value ‚âà ${(2 * pValueLower).toFixed(6)}`);
} else {
  // Ë¶≥Ê∏¨ÂÄ§„ÅåÊúüÂæÖÂÄ§„Çà„ÇäÂ§ß„Åç„ÅÑÂ†¥ÂêàÔºö‰∏äÂÅ¥Ê§úÂÆö
  const pValueUpper = poissonCCDF(x, lambda);
  console.log(`   P(X ‚â• ${x}) = ${pValueUpper.toFixed(6)} (upper tail)`);
  console.log(`   Two-sided p-value ‚âà ${(2 * pValueUpper).toFixed(6)}`);
}
console.log();

// 3. ‰ø°È†ºÂå∫ÈñìÔºàExact/Clopper-PearsonÔºâ
console.log(`üìä Exact Confidence Intervals (95%):`);

const exactCI = calculateExactCI(x, N, 0.05);
console.log(`   95% CI for true probability: [${exactCI.lower.toExponential(3)}, ${exactCI.upper.toExponential(3)}]`);
console.log(`   Theoretical p0 = ${p0.toExponential(3)} is ${exactCI.contains ? 'WITHIN' : 'OUTSIDE'} CI`);
console.log();

// 4. ÂäπÊûúÈáè„Å®ÂÆüÁî®ÁöÑÊúâÊÑèÊÄß
console.log(`üîç Effect Size Analysis:`);
const observedRate = x / N;
const expectedRate = p0;
const relativeRisk = x > 0 ? observedRate / expectedRate : 'undefined (zero observed)';
const absoluteDiff = observedRate - expectedRate;

console.log(`   Observed rate: ${observedRate.toExponential(3)} (${x}/${N})`);
console.log(`   Expected rate: ${expectedRate.toExponential(3)}`);
console.log(`   Relative risk: ${typeof relativeRisk === 'number' ? relativeRisk.toFixed(2) : relativeRisk}`);
console.log(`   Absolute difference: ${absoluteDiff.toExponential(3)}`);
console.log();

// 5. Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥
console.log(`üí° Recommendations:`);
if (x === 0 && pZero < 0.01) {
  console.log(`   ‚ö†Ô∏è  Consider increasing sample size or checking detection mechanism`);
  console.log(`   üìä For reliable detection, recommend N ‚â• ${Math.ceil(3 / p0).toLocaleString()} trials`);
} else if (x > 0) {
  const chiSquare = Math.pow(x - lambda, 2) / lambda;
  console.log(`   üìä œá¬≤ goodness-of-fit: ${chiSquare.toFixed(3)} (df=1)`);
  console.log(`   ${chiSquare > 3.84 ? '‚ö†Ô∏è  Significant deviation' : '‚úÖ Consistent with theory'} (Œ±=0.05)`);
} else {
  console.log(`   ‚úÖ Zero observation is statistically reasonable`);
}

// Helper function: Exact confidence interval using beta distribution
function calculateExactCI(x, n, alpha) {
  // Clopper-Pearson exact method
  if (x === 0) {
    return {
      lower: 0,
      upper: 1 - Math.pow(alpha / 2, 1 / n),
      contains: p0 <= (1 - Math.pow(alpha / 2, 1 / n))
    };
  } else if (x === n) {
    return {
      lower: Math.pow(alpha / 2, 1 / n),
      upper: 1,
      contains: p0 >= Math.pow(alpha / 2, 1 / n)
    };
  } else {
    // Approximate using normal approximation to beta distribution
    // More accurate methods would use incomplete beta function
    const pHat = x / n;
    const se = Math.sqrt(pHat * (1 - pHat) / n);
    const z = 1.96; // 95% CI
    
    const lower = Math.max(0, pHat - z * se);
    const upper = Math.min(1, pHat + z * se);
    
    return {
      lower: lower,
      upper: upper,
      contains: p0 >= lower && p0 <= upper
    };
  }
}

console.log(`\n‚úÖ Statistical analysis complete`);

// Exit with appropriate code
if (x === 0 && pZero < 0.001) {
  console.error(`\n‚ùå Yong overlay underflow suspicious (zero hits below 0.1% threshold)`);
  process.exit(1);
} else {
  process.exit(0);
}