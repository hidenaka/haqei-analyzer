#!/usr/bin/env node

// Final comprehensive test to verify results display works
async function testFinalResultsDisplay() {
    console.log('üéØ Final Results Display Test - Verifying Fixed Application\n');

    try {
        const { readFileSync } = await import('fs');
        const { join } = await import('path');
        
        // Global setup
        global.window = global;
        global.fetch = () => Promise.reject(new Error('Mock fetch - no file loading'));
        
        // Mock comprehensive data
        global.HAQEI_DATA = {
            hexagrams_master: [
                { hexagram_id: 1, name_jp: "‰πæÁÇ∫Â§©", upper_trigram_id: 1, lower_trigram_id: 1 },
                { hexagram_id: 2, name_jp: "Âù§ÁÇ∫Âú∞", upper_trigram_id: 8, lower_trigram_id: 8 },
                { hexagram_id: 8, name_jp: "Ê∞¥Âú∞ÊØî", upper_trigram_id: 6, lower_trigram_id: 8 },
            ]
        };
        
        global.H64_8D_VECTORS = {
            1: { ‰πæ_ÂâµÈÄ†ÊÄß: 8, Èúá_Ë°åÂãïÊÄß: 7, Âùé_Êé¢Ê±ÇÊÄß: 6, ËâÆ_ÂÆâÂÆöÊÄß: 5, Âù§_ÂèóÂÆπÊÄß: 4, Â∑Ω_ÈÅ©ÂøúÊÄß: 5, Èõ¢_Ë°®ÁèæÊÄß: 6, ÂÖå_Ë™øÂíåÊÄß: 7 },
            2: { ‰πæ_ÂâµÈÄ†ÊÄß: 4, Èúá_Ë°åÂãïÊÄß: 5, Âùé_Êé¢Ê±ÇÊÄß: 5, ËâÆ_ÂÆâÂÆöÊÄß: 8, Âù§_ÂèóÂÆπÊÄß: 8, Â∑Ω_ÈÅ©ÂøúÊÄß: 6, Èõ¢_Ë°®ÁèæÊÄß: 4, ÂÖå_Ë™øÂíåÊÄß: 6 },
            8: { ‰πæ_ÂâµÈÄ†ÊÄß: 5, Èúá_Ë°åÂãïÊÄß: 6, Âùé_Êé¢Ê±ÇÊÄß: 7, ËâÆ_ÂÆâÂÆöÊÄß: 6, Âù§_ÂèóÂÆπÊÄß: 7, Â∑Ω_ÈÅ©ÂøúÊÄß: 5, Èõ¢_Ë°®ÁèæÊÄß: 5, ÂÖå_Ë™øÂíåÊÄß: 8 },
        };

        // Load classes
        const calculatorPath = join(process.cwd(), 'public/new-analyzer/js/core/Calculator.js');
        const calculatorCode = readFileSync(calculatorPath, 'utf8');
        eval(calculatorCode);

        const tripleOSPath = join(process.cwd(), 'public/new-analyzer/js/core/TripleOSEngine.js');
        const tripleOSCode = readFileSync(tripleOSPath, 'utf8');
        eval(tripleOSCode);

        // Mock DataManager with realistic data
        class MockDataManager {
            getVectors() {
                return global.H64_8D_VECTORS;
            }
            
            getAllHexagramData() {
                return global.HAQEI_DATA.hexagrams_master;
            }
            
            findHexagramById(id) {
                return global.HAQEI_DATA.hexagrams_master.find(h => h.hexagram_id === id);
            }
            
            getKeywordMap() {
                return {
                    'leadership': [1, 8],
                    'confidence': [1],
                    'cooperation': [2, 8],
                    'harmony': [2, 8],
                    'creativity': [1],
                    'innovation': [1],
                    '‰πæ_ÂâµÈÄ†ÊÄß': [1],
                    'ÂÖå_Ë™øÂíåÊÄß': [2, 8],
                    'Âù§_ÂèóÂÆπÊÄß': [2]
                };
            }
            
            getLineKeywordMap() {
                return {
                    'caution': [2, 8],
                    'analysis': [8],
                    'reflection': [2],
                    'conviction': [1],
                    'independence': [1],
                    'determination': [1],
                    'safety': [2],
                    'stability': [2, 8]
                };
            }

            getHexagramDetails(hexagramId) {
                if (!hexagramId || hexagramId < 1 || hexagramId > 64) {
                    return null;
                }
                
                return {
                    potential_strengths: [`Âº∑„Åø${hexagramId}-1`, `Âº∑„Åø${hexagramId}-2`],
                    potential_weaknesses: [`Ë™≤È°å${hexagramId}-1`, `Ë™≤È°å${hexagramId}-2`],
                    description: `Âç¶${hexagramId}„ÅÆË©≥Á¥∞Ë™¨Êòé`,
                    keywords: [`„Ç≠„Éº„ÉØ„Éº„Éâ${hexagramId}-1`, `„Ç≠„Éº„ÉØ„Éº„Éâ${hexagramId}-2`]
                };
            }
        }

        const dataManager = new MockDataManager();
        const engine = new TripleOSEngine(dataManager);
        
        console.log('‚úÖ Engine Setup Complete');
        console.log(`- Calculator initialized: ${!!engine.calculator}`);
        console.log(`- DataManager methods available: ${!!dataManager.getKeywordMap()}`);

        // Create realistic test answers that would trigger the previous null issue
        const testAnswers = [
            // Worldview questions (q1-q24)
            ...Array.from({length: 24}, (_, i) => ({
                questionId: `q${i + 1}`,
                selectedValue: i % 2 === 0 ? "A" : "B",
                scoring_tags: [
                    { key: ["‰πæ_ÂâµÈÄ†ÊÄß", "Âùé_Êé¢Ê±ÇÊÄß", "Èõ¢_Ë°®ÁèæÊÄß", "Èúá_Ë°åÂãïÊÄß"][i % 4], value: 2.0 + Math.random() * 1.5 },
                    { key: ["ÂÖå_Ë™øÂíåÊÄß", "ËâÆ_ÂÆâÂÆöÊÄß", "Â∑Ω_ÈÅ©ÂøúÊÄß", "Âù§_ÂèóÂÆπÊÄß"][i % 4], value: 1.0 + Math.random() * 1.5 }
                ]
            })),
            // Scenario questions that previously caused null hexagramId
            {
                questionId: "q25",
                outerChoice: {
                    value: "A",
                    text: "Á©çÊ•µÁöÑ„Å´„É™„Éº„ÉÄ„Éº„Ç∑„ÉÉ„Éó„ÇíÁô∫ÊèÆ„Åô„Çã",
                    scoring_tags: ["leadership", "confidence"]
                },
                innerChoice: {
                    value: "A",
                    text: "Ëá™ÂàÜ„ÅÆ‰ø°Âøµ„ÇíË≤´„Åè",
                    scoring_tags: ["conviction", "independence"]  // This would match only Engine OS
                }
            },
            {
                questionId: "q26",
                outerChoice: {
                    value: "B",
                    text: "ÂçîË™øÊÄß„ÇíÈáçË¶ñ„Åô„Çã",
                    scoring_tags: ["cooperation", "harmony"]
                },
                innerChoice: {
                    value: "B",
                    text: "Ê±∫Êñ≠Âäõ„ÇíÈáçË¶ñ„Åô„Çã",
                    scoring_tags: ["determination"]  // This would also match only Engine OS
                }
            }
        ];

        console.log('\nüß™ Testing Triple OS Analysis with Previously Problematic Data...');
        
        const analysisResult = await engine.analyzeTripleOS(testAnswers);
        
        console.log('\nüìä Analysis Results Summary:');
        console.log(`‚úÖ Analysis Type: ${analysisResult.analysisType}`);
        console.log(`‚úÖ Engine OS: ${analysisResult.engineOS?.osName} (ID: ${analysisResult.engineOS?.hexagramId})`);
        console.log(`‚úÖ Interface OS: ${analysisResult.interfaceOS?.osName} (ID: ${analysisResult.interfaceOS?.hexagramId})`);
        console.log(`‚úÖ SafeMode OS: ${analysisResult.safeModeOS?.osName} (ID: ${analysisResult.safeModeOS?.hexagramId})`);
        console.log(`‚úÖ Dimensions: ${analysisResult.dimensions?.length} dimensions`);

        // Test insights generation
        console.log('\nüí° Testing Insights Generation...');
        const insights = await engine.generateInsights(analysisResult);
        console.log(`‚úÖ Insights Summary: ${insights.summary.substring(0, 80)}...`);
        console.log(`‚úÖ Strengths: ${insights.strengths?.length} items`);
        console.log(`‚úÖ Recommendations: ${insights.recommendations?.length} items`);

        // Critical checks
        console.log('\nüîç Critical Validation Checks:');
        
        const hasValidEngine = analysisResult.engineOS && analysisResult.engineOS.hexagramId;
        const hasValidInterface = analysisResult.interfaceOS && analysisResult.interfaceOS.hexagramId;
        const hasValidSafeMode = analysisResult.safeModeOS && analysisResult.safeModeOS.hexagramId;
        
        console.log(`Engine OS hexagramId: ${hasValidEngine ? '‚úÖ Valid' : '‚ùå Invalid'} (${analysisResult.engineOS?.hexagramId})`);
        console.log(`Interface OS hexagramId: ${hasValidInterface ? '‚úÖ Valid' : '‚ùå Invalid'} (${analysisResult.interfaceOS?.hexagramId})`);
        console.log(`SafeMode OS hexagramId: ${hasValidSafeMode ? '‚úÖ Valid' : '‚ùå Invalid'} (${analysisResult.safeModeOS?.hexagramId})`);

        // Test TripleOSResultsView compatibility
        console.log('\nüé® Testing TripleOSResultsView Compatibility...');
        
        if (hasValidEngine && hasValidInterface && hasValidSafeMode) {
            // Mock TripleOSResultsView render test
            const mockOptions = {
                analysisResult: analysisResult,
                insights: insights,
                dataManager: dataManager,
                compatibilityLoader: { 
                    loadEngineInterfaceCompatibility: () => Promise.resolve(null),
                    loadEngineSafemodeCompatibility: () => Promise.resolve(null)
                }
            };
            
            console.log('‚úÖ All data ready for TripleOSResultsView');
            console.log(`- Engine OS details available: ${!!dataManager.getHexagramDetails(analysisResult.engineOS.hexagramId)}`);
            console.log(`- Interface OS details available: ${!!dataManager.getHexagramDetails(analysisResult.interfaceOS.hexagramId)}`);
            console.log(`- SafeMode OS details available: ${!!dataManager.getHexagramDetails(analysisResult.safeModeOS.hexagramId)}`);
            
            console.log('\nüéâ SUCCESS: Fixed application should now display results without errors!');
            console.log('- No more "SafeMode OS hexagramId is null" warnings');
            console.log('- No more black screen issues');
            console.log('- Complete Triple OS analysis data available');
            
        } else {
            console.log('\n‚ùå FAILURE: Some OS data is still invalid');
        }

        // Summary report
        console.log('\nüìã Final Test Report:');
        console.log('=====================================');
        console.log(`Total Test Answers: ${testAnswers.length}`);
        console.log(`Engine OS Success: ${hasValidEngine ? 'PASS' : 'FAIL'}`);
        console.log(`Interface OS Success: ${hasValidInterface ? 'PASS' : 'FAIL'}`);
        console.log(`SafeMode OS Success: ${hasValidSafeMode ? 'PASS' : 'FAIL'}`);
        console.log(`Insights Generation: ${insights ? 'PASS' : 'FAIL'}`);
        console.log(`Overall Status: ${(hasValidEngine && hasValidInterface && hasValidSafeMode && insights) ? 'üéâ ALL SYSTEMS GO' : '‚ùå NEEDS ATTENTION'}`);

    } catch (error) {
        console.error('\n‚ùå CRITICAL ERROR in final test:', error);
        console.error(`Stack: ${error.stack}`);
    }
}

testFinalResultsDisplay();