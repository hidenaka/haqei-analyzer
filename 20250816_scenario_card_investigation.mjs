/**
 * „Ç∑„Éä„É™„Ç™„Ç´„Éº„ÉâÊú™Ë°®Á§∫ÂïèÈ°å„ÅÆË™øÊüª
 * Ë§áÈõë„Å™Ë°®Á§∫„É≠„Ç∏„ÉÉ„ÇØ„ÅÆÂïèÈ°å„ÇíÁâπÂÆö
 */

import { chromium } from 'playwright';

async function investigateScenarioCards() {
    console.log('üîç „Ç∑„Éä„É™„Ç™„Ç´„Éº„ÉâË°®Á§∫ÂïèÈ°åË™øÊüª');
    console.log('=====================================\n');
    
    const browser = await chromium.launch({ 
        headless: false
    });
    
    try {
        const page = await browser.newPage();
        
        // „Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„ÇíÁõ£Ë¶ñ
        const logs = [];
        page.on('console', msg => {
            const text = msg.text();
            if (text.includes('scenario') || text.includes('card') || 
                text.includes('SafeDOMUpdater') || text.includes('display')) {
                logs.push({
                    type: msg.type(),
                    text: text
                });
                console.log(`  üìù ${msg.type()}: ${text}`);
            }
        });
        
        // „Ç®„É©„Éº„ÇíÁõ£Ë¶ñ
        page.on('pageerror', error => {
            console.log(`  ‚ùå Page error: ${error.message}`);
        });
        
        console.log('üìã Step 1: ÂàùÊúüÁä∂ÊÖã„ÅÆÁ¢∫Ë™ç');
        console.log('--------------------------------');
        
        await page.goto('http://localhost:8788/future_simulator.html', { 
            waitUntil: 'networkidle'
        });
        
        await page.waitForTimeout(2000);
        
        // DOMÊßãÈÄ†„ÇíÁ¢∫Ë™ç
        const initialDOM = await page.evaluate(() => {
            const resultsContainer = document.getElementById('resultsContainer');
            const eightScenariosContainer = document.getElementById('eight-scenarios-display-container');
            const scenariosCards = document.getElementById('scenarios-cards');
            
            return {
                resultsContainer: {
                    exists: !!resultsContainer,
                    display: resultsContainer ? window.getComputedStyle(resultsContainer).display : null,
                    children: resultsContainer ? resultsContainer.children.length : 0
                },
                eightScenariosContainer: {
                    exists: !!eightScenariosContainer,
                    display: eightScenariosContainer ? window.getComputedStyle(eightScenariosContainer).display : null,
                    innerHTML: eightScenariosContainer ? eightScenariosContainer.innerHTML.substring(0, 200) : null
                },
                scenariosCards: {
                    exists: !!scenariosCards,
                    children: scenariosCards ? scenariosCards.children.length : 0
                }
            };
        });
        
        console.log('\n  DOMÊßãÈÄ†:');
        console.log(`    resultsContainer: ${initialDOM.resultsContainer.exists ? '‚úÖ' : '‚ùå'}`);
        console.log(`      - display: ${initialDOM.resultsContainer.display}`);
        console.log(`      - Â≠êË¶ÅÁ¥†: ${initialDOM.resultsContainer.children}ÂÄã`);
        console.log(`    eight-scenarios-display-container: ${initialDOM.eightScenariosContainer.exists ? '‚úÖ' : '‚ùå'}`);
        console.log(`      - display: ${initialDOM.eightScenariosContainer.display}`);
        console.log(`    scenarios-cards: ${initialDOM.scenariosCards.exists ? '‚úÖ' : '‚ùå'}`);
        
        console.log('\nüìã Step 2: ÂàÜÊûêÂÆüË°å„Å®Èñ¢Êï∞Âëº„Å≥Âá∫„Åó„ÅÆËøΩË∑°');
        console.log('--------------------------------');
        
        // Èñ¢Êï∞Âëº„Å≥Âá∫„Åó„ÇíËøΩË∑°
        await page.evaluate(() => {
            // SafeDOMUpdater„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÇíÁõ£Ë¶ñ
            if (window.SafeDOMUpdater) {
                const originalUpdate = SafeDOMUpdater.prototype.updateResultsContainer;
                SafeDOMUpdater.prototype.updateResultsContainer = function(analysisResult) {
                    console.log('üîÑ SafeDOMUpdater.updateResultsContainer called');
                    console.log('  Analysis result keys:', Object.keys(analysisResult || {}));
                    const result = originalUpdate.call(this, analysisResult);
                    console.log('  Return value:', result);
                    return result;
                };
                
                const originalScenarios = SafeDOMUpdater.prototype.updateScenariosDisplay;
                SafeDOMUpdater.prototype.updateScenariosDisplay = function(container, analysisResult) {
                    console.log('üéØ SafeDOMUpdater.updateScenariosDisplay called');
                    const scenarios = this.extractScenarios(analysisResult);
                    console.log('  Extracted scenarios:', scenarios.length);
                    return originalScenarios.call(this, container, analysisResult);
                };
            }
            
            // future-simulator-core„ÅÆÂãï‰Ωú„ÇíÁõ£Ë¶ñ
            if (window.haqeiFutureSimulator) {
                console.log('‚úÖ haqeiFutureSimulator exists');
            } else {
                console.log('‚ùå haqeiFutureSimulator not found');
            }
        });
        
        // ÂàÜÊûêÂÆüË°å
        await page.fill('textarea', 'Ëª¢ËÅ∑„ÇíÊ§úË®é‰∏≠„ÄÇÊñ∞„Åó„ÅÑÊåëÊà¶„Çí„Åó„Åü„ÅÑ„ÄÇ');
        
        await page.evaluate(() => {
            const btn = document.querySelector('#aiGuessBtn');
            if (btn) {
                console.log('üöÄ Clicking analyze button...');
                btn.click();
            }
        });
        
        await page.waitForTimeout(5000);
        
        console.log('\nüìã Step 3: ÂàÜÊûêÂæå„ÅÆDOMÁä∂ÊÖãÁ¢∫Ë™ç');
        console.log('--------------------------------');
        
        // ÂàÜÊûêÂæå„ÅÆDOMÁä∂ÊÖã
        const afterDOM = await page.evaluate(() => {
            const resultsContainer = document.getElementById('resultsContainer');
            const eightScenariosContainer = document.getElementById('eight-scenarios-display-container');
            const scenariosCards = document.getElementById('scenarios-cards');
            const scenarioCards = document.querySelectorAll('.scenario-card');
            
            // „Å©„Åì„Å´„Ç´„Éº„Éâ„ÅåÈÖçÁΩÆ„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
            let cardLocations = [];
            scenarioCards.forEach(card => {
                let parent = card.parentElement;
                let location = [];
                while (parent && parent !== document.body) {
                    if (parent.id) {
                        location.push(`#${parent.id}`);
                    } else if (parent.className) {
                        location.push(`.${parent.className.split(' ')[0]}`);
                    }
                    parent = parent.parentElement;
                }
                cardLocations.push(location.reverse().join(' > '));
            });
            
            return {
                resultsContainer: {
                    display: resultsContainer ? window.getComputedStyle(resultsContainer).display : null,
                    visible: resultsContainer ? resultsContainer.style.display !== 'none' : false
                },
                eightScenariosContainer: {
                    exists: !!eightScenariosContainer,
                    display: eightScenariosContainer ? window.getComputedStyle(eightScenariosContainer).display : null,
                    children: eightScenariosContainer ? eightScenariosContainer.children.length : 0,
                    hasGrid: eightScenariosContainer ? !!eightScenariosContainer.querySelector('.scenarios-grid') : false
                },
                scenariosCards: {
                    exists: !!scenariosCards,
                    children: scenariosCards ? scenariosCards.children.length : 0
                },
                scenarioCards: {
                    count: scenarioCards.length,
                    locations: cardLocations
                }
            };
        });
        
        console.log('\n  ÂàÜÊûêÂæå„ÅÆDOM:');
        console.log(`    resultsContainerË°®Á§∫: ${afterDOM.resultsContainer.display}`);
        console.log(`    eight-scenarios-display-container:`);
        console.log(`      - Â≠òÂú®: ${afterDOM.eightScenariosContainer.exists ? '‚úÖ' : '‚ùå'}`);
        console.log(`      - display: ${afterDOM.eightScenariosContainer.display}`);
        console.log(`      - Â≠êË¶ÅÁ¥†: ${afterDOM.eightScenariosContainer.children}ÂÄã`);
        console.log(`      - .scenarios-grid: ${afterDOM.eightScenariosContainer.hasGrid ? '‚úÖ' : '‚ùå'}`);
        console.log(`    „Ç∑„Éä„É™„Ç™„Ç´„Éº„Éâ: ${afterDOM.scenarioCards.count}ÂÄã`);
        
        if (afterDOM.scenarioCards.count > 0) {
            console.log('    „Ç´„Éº„Éâ„ÅÆÈÖçÁΩÆÂ†¥ÊâÄ:');
            afterDOM.scenarioCards.locations.forEach((loc, i) => {
                console.log(`      ${i + 1}. ${loc}`);
            });
        }
        
        console.log('\nüìã Step 4: „Éá„Éº„Çø„Éï„É≠„Éº„ÅÆËøΩË∑°');
        console.log('--------------------------------');
        
        // ÂàÜÊûêÁµêÊûú„ÅÆ„Éá„Éº„ÇøÊßãÈÄ†„ÇíÁ¢∫Ë™ç
        const dataFlow = await page.evaluate(() => {
            // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Åã„ÇâÂàÜÊûêÁµêÊûú„ÇíÊé¢„Åô
            const possibleResults = [];
            
            // „Çà„Åè„ÅÇ„ÇãÂ§âÊï∞Âêç
            const varNames = ['analysisResult', 'lastAnalysisResult', 'currentResult', 'globalAnalysisResult'];
            varNames.forEach(name => {
                if (window[name]) {
                    possibleResults.push({
                        name: name,
                        keys: Object.keys(window[name]),
                        hasScenarios: !!(window[name].scenarios || window[name].finalEightPaths || window[name].eightScenarios)
                    });
                }
            });
            
            // localStorage„ÇÇÁ¢∫Ë™ç
            const storageKeys = [];
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key.includes('analysis') || key.includes('result') || key.includes('scenario')) {
                    storageKeys.push(key);
                }
            }
            
            return {
                globalVars: possibleResults,
                storageKeys: storageKeys
            };
        });
        
        console.log('  „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞:');
        if (dataFlow.globalVars.length > 0) {
            dataFlow.globalVars.forEach(v => {
                console.log(`    ${v.name}: ${v.hasScenarios ? '‚úÖ „Ç∑„Éä„É™„Ç™„ÅÇ„Çä' : '‚ùå „Ç∑„Éä„É™„Ç™„Å™„Åó'}`);
                console.log(`      keys: ${v.keys.slice(0, 5).join(', ')}...`);
            });
        } else {
            console.log('    ÂàÜÊûêÁµêÊûú„ÅÆ„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        }
        
        if (dataFlow.storageKeys.length > 0) {
            console.log('\n  localStorage:');
            dataFlow.storageKeys.forEach(key => {
                console.log(`    - ${key}`);
            });
        }
        
        console.log('\nüìã Step 5: SafeDOMUpdater„ÅÆÂãï‰ΩúÁ¢∫Ë™ç');
        console.log('--------------------------------');
        
        // SafeDOMUpdater„ÅÆ„É°„ÇΩ„ÉÉ„Éâ„ÇíÁõ¥Êé•„ÉÜ„Çπ„Éà
        const testResult = await page.evaluate(() => {
            if (!window.SafeDOMUpdater) {
                return { error: 'SafeDOMUpdater not found' };
            }
            
            const updater = new window.SafeDOMUpdater();
            
            // „ÉÜ„Çπ„Éà„Éá„Éº„Çø
            const testData = {
                scenarios: [
                    { name: '„ÉÜ„Çπ„Éà1', description: 'Ë™¨Êòé1', score: 80 },
                    { name: '„ÉÜ„Çπ„Éà2', description: 'Ë™¨Êòé2', score: 70 },
                    { name: '„ÉÜ„Çπ„Éà3', description: 'Ë™¨Êòé3', score: 60 },
                    { name: '„ÉÜ„Çπ„Éà4', description: 'Ë™¨Êòé4', score: 50 },
                    { name: '„ÉÜ„Çπ„Éà5', description: 'Ë™¨Êòé5', score: 40 },
                    { name: '„ÉÜ„Çπ„Éà6', description: 'Ë™¨Êòé6', score: 30 },
                    { name: '„ÉÜ„Çπ„Éà7', description: 'Ë™¨Êòé7', score: 20 },
                    { name: '„ÉÜ„Çπ„Éà8', description: 'Ë™¨Êòé8', score: 10 }
                ]
            };
            
            // extractScenarios„Çí„ÉÜ„Çπ„Éà
            const extracted = updater.extractScenarios(testData);
            
            // updateResultsContainer„ÇíÊâãÂãïÂÆüË°å
            const updateResult = updater.updateResultsContainer(testData);
            
            // ÁµêÊûúÁ¢∫Ë™ç
            const cards = document.querySelectorAll('.scenario-card');
            
            return {
                extractedCount: extracted.length,
                updateResult: updateResult,
                cardsAfterUpdate: cards.length,
                containerExists: !!document.getElementById('eight-scenarios-display-container')
            };
        });
        
        console.log('  SafeDOMUpdater„ÉÜ„Çπ„Éà:');
        console.log(`    ÊäΩÂá∫„Åï„Çå„Åü„Ç∑„Éä„É™„Ç™: ${testResult.extractedCount}ÂÄã`);
        console.log(`    updateResultsContainer: ${testResult.updateResult ? '‚úÖ' : '‚ùå'}`);
        console.log(`    Êõ¥Êñ∞Âæå„ÅÆ„Ç´„Éº„ÉâÊï∞: ${testResult.cardsAfterUpdate}ÂÄã`);
        console.log(`    ContainerÂ≠òÂú®: ${testResult.containerExists ? '‚úÖ' : '‚ùå'}`);
        
        console.log('\n=====================================');
        console.log('üìä Ë®∫Êñ≠ÁµêÊûú');
        console.log('=====================================\n');
        
        const issues = [];
        
        if (afterDOM.scenarioCards.count === 0) {
            issues.push('„Ç∑„Éä„É™„Ç™„Ç´„Éº„Éâ„ÅåÂÖ®„Åè‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ');
        }
        
        if (!afterDOM.eightScenariosContainer.hasGrid) {
            issues.push('.scenarios-grid„Åå‰ΩúÊàê„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ');
        }
        
        if (testResult.cardsAfterUpdate === 0) {
            issues.push('SafeDOMUpdater„ÅÆ„Ç´„Éº„Éâ‰ΩúÊàê„ÅåÊ©üËÉΩ„Åó„Å¶„ÅÑ„Å™„ÅÑ');
        }
        
        if (dataFlow.globalVars.length === 0) {
            issues.push('ÂàÜÊûêÁµêÊûú„Åå„Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Å´‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ');
        }
        
        if (issues.length > 0) {
            console.log('üö® Áô∫Ë¶ã„Åï„Çå„ÅüÂïèÈ°å:');
            issues.forEach((issue, i) => {
                console.log(`  ${i + 1}. ${issue}`);
            });
        } else {
            console.log('‚úÖ ‰∏ªË¶Å„Å™ÂïèÈ°å„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
        }
        
        console.log('\nüìù Êé®Â•®„Åï„Çå„ÇãÂØæÂøú:');
        console.log('  1. SafeDOMUpdater.updateScenariosDisplay„ÅÆÂÆüË£ÖÁ¢∫Ë™ç');
        console.log('  2. extractScenarios„É°„ÇΩ„ÉÉ„Éâ„ÅÆ„Éá„Éº„ÇøÂèñÂæóÁ¢∫Ë™ç');
        console.log('  3. future-simulator-core„Å®„ÅÆÈÄ£Êê∫Á¢∫Ë™ç');
        
    } catch (error) {
        console.error('‚ùå „Ç®„É©„Éº:', error.message);
    } finally {
        console.log('\n‚è∞ 10ÁßíÂæå„Å´„Éñ„É©„Ç¶„Ç∂„ÇíÈñâ„Åò„Åæ„Åô...');
        await page.waitForTimeout(10000);
        await browser.close();
    }
}

// ÂÆüË°å
investigateScenarioCards().catch(console.error);