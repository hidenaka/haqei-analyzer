/**
 * ÂàùÊúüÂåñ„Éó„É≠„Çª„Çπ„Éá„Éê„ÉÉ„Ç∞ - 2025Âπ¥8Êúà16Êó•
 */
import { chromium } from 'playwright';

async function debugInitialization() {
    console.log('üîç ÂàùÊúüÂåñ„Éó„É≠„Çª„Çπ„Éá„Éê„ÉÉ„Ç∞ÈñãÂßã');
    console.log('='.repeat(60));
    
    const browser = await chromium.launch({ 
        headless: false,
        slowMo: 1000
    });
    
    const context = await browser.newContext();
    const page = await context.newPage();
    
    // ÂÖ®„Å¶„ÅÆ„Ç≥„É≥„ÇΩ„Éº„É´„É°„ÉÉ„Çª„Éº„Ç∏„Çí„Ç≠„É£„Éó„ÉÅ„É£
    const consoleLogs = [];
    
    page.on('console', msg => {
        consoleLogs.push({
            type: msg.type(),
            text: msg.text(),
            timestamp: new Date().toISOString()
        });
    });
    
    try {
        const filePath = 'file://' + process.cwd() + '/public/os_analyzer.html';
        console.log('üìã Loading page: ' + filePath);
        
        await page.goto(filePath, { waitUntil: 'domcontentloaded', timeout: 15000 });
        
        // ÂàùÊúüÂåñ„Éó„É≠„Çª„Çπ„ÇíÊÆµÈöéÁöÑ„Å´Áõ£Ë¶ñ
        console.log('üìã Stage 1: DOMContentLoadedÂæå„ÅÆÁä∂ÊÖã');
        console.log('-'.repeat(40));
        
        await page.waitForTimeout(1000);
        
        const initialState = await page.evaluate(() => {
            return {
                bodyChildren: document.body.children.length,
                hasWelcomeScreen: !!document.getElementById('welcome-screen'),
                hasQuestionScreen: !!document.getElementById('question-screen'),
                hasErrorDiv: document.body.innerHTML.includes('ÂàùÊúüÂåñ„Ç®„É©„Éº'),
                scriptCount: document.scripts.length,
                windowKeys: Object.keys(window).filter(k => k.includes('Manager') || k.includes('Analyzer')).slice(0, 10)
            };
        });
        
        console.log('ÂàùÊúüÁä∂ÊÖã:');
        console.log('  BodyÂ≠êË¶ÅÁ¥†Êï∞: ' + initialState.bodyChildren);
        console.log('  Welcome ScreenÂ≠òÂú®: ' + initialState.hasWelcomeScreen);
        console.log('  Question ScreenÂ≠òÂú®: ' + initialState.hasQuestionScreen);
        console.log('  „Ç®„É©„ÉºÁîªÈù¢Ë°®Á§∫: ' + initialState.hasErrorDiv);
        console.log('  ScriptË¶ÅÁ¥†Êï∞: ' + initialState.scriptCount);
        console.log('  Window Manager/Analyzer: ' + initialState.windowKeys.join(', '));
        
        console.log();
        console.log('üìã Stage 2: 2ÁßíÂæå„ÅÆÁä∂ÊÖãÂ§âÂåñ');
        console.log('-'.repeat(40));
        
        await page.waitForTimeout(2000);
        
        const laterState = await page.evaluate(() => {
            return {
                bodyChildren: document.body.children.length,
                hasWelcomeScreen: !!document.getElementById('welcome-screen'),
                hasQuestionScreen: !!document.getElementById('question-screen'),
                hasErrorDiv: document.body.innerHTML.includes('ÂàùÊúüÂåñ„Ç®„É©„Éº'),
                bodyHTML: document.body.innerHTML.substring(0, 500)
            };
        });
        
        console.log('2ÁßíÂæåÁä∂ÊÖã:');
        console.log('  BodyÂ≠êË¶ÅÁ¥†Êï∞: ' + laterState.bodyChildren);
        console.log('  Welcome ScreenÂ≠òÂú®: ' + laterState.hasWelcomeScreen);
        console.log('  Question ScreenÂ≠òÂú®: ' + laterState.hasQuestionScreen);
        console.log('  „Ç®„É©„ÉºÁîªÈù¢Ë°®Á§∫: ' + laterState.hasErrorDiv);
        
        if (laterState.hasErrorDiv) {
            console.log('‚ùå „Ç®„É©„ÉºÁîªÈù¢„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
            console.log('Body HTML preview:');
            console.log(laterState.bodyHTML);
        }
        
        console.log();
        console.log('üìã Stage 3: „Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞ÂàÜÊûê');
        console.log('-'.repeat(40));
        
        console.log('„Ç≠„É£„Éó„ÉÅ„É£„Åï„Çå„Åü„É≠„Ç∞Êï∞: ' + consoleLogs.length);
        consoleLogs.forEach((log, index) => {
            console.log('  ' + (index + 1) + '. [' + log.type.toUpperCase() + '] ' + log.text);
        });
        
        console.log();
        console.log('üìã Stage 4: „Çπ„ÇØ„É™„Éó„ÉàÂÆüË°åÁä∂Ê≥ÅÁ¢∫Ë™ç');
        console.log('-'.repeat(40));
        
        const scriptStatus = await page.evaluate(() => {
            const scripts = Array.from(document.scripts);
            return scripts.map(script => ({
                src: script.src || 'inline',
                loaded: script.readyState || 'unknown',
                hasContent: script.innerHTML.length > 0
            }));
        });
        
        console.log('„Çπ„ÇØ„É™„Éó„ÉàÂÆüË°åÁä∂Ê≥Å:');
        scriptStatus.forEach((script, index) => {
            console.log('  ' + (index + 1) + '. ' + script.src);
            console.log('     Áä∂ÊÖã: ' + script.loaded);
            console.log('     ÂÜÖÂÆπ„ÅÇ„Çä: ' + script.hasContent);
        });
        
        console.log();
        console.log('üìã Stage 5: ÁâπÂÆö„Ç®„É©„Éº„ÅÆË©≥Á¥∞ËøΩË∑°');
        console.log('-'.repeat(40));
        
        // CriticalCSSAnalyzer„Ç®„É©„Éº„ÅÆË©≥Á¥∞
        const cssAnalyzerError = await page.evaluate(() => {
            try {
                // CriticalCSSAnalyzer„ÅåÂéüÂõ†„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                const btn = document.querySelector('button');
                return {
                    buttonExists: !!btn,
                    buttonHasListener: btn ? !!btn.onclick : false,
                    criticalCSS: typeof CriticalCSSAnalyzer !== 'undefined'
                };
            } catch (e) {
                return { error: e.message };
            }
        });
        
        console.log('CSS AnalyzerË©≥Á¥∞:');
        console.log('  „Éú„Çø„É≥Â≠òÂú®: ' + cssAnalyzerError.buttonExists);
        console.log('  „Éú„Çø„É≥„É™„Çπ„Éä„Éº: ' + cssAnalyzerError.buttonHasListener);
        console.log('  CriticalCSSAnalyzer: ' + cssAnalyzerError.criticalCSS);
        if (cssAnalyzerError.error) {
            console.log('  „Ç®„É©„Éº: ' + cssAnalyzerError.error);
        }
        
    } catch (error) {
        console.log('‚ùå „Éá„Éê„ÉÉ„Ç∞„Ç®„É©„Éº: ' + error.message);
    } finally {
        await browser.close();
    }
    
    return consoleLogs;
}

debugInitialization().catch(console.error);
