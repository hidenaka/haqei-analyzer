class FutureBranchingSystem{constructor(){this.currentState=null,this.choices=[],this.outcomes=[],this.selectedChoice=null,this.layoutType="classic",this.animationEnabled=!0,this.votingData={},this.personaTemplates=this.initPersonaTemplates()}initPersonaTemplates(){return{careerSeeker:{id:"career-seeker",name:"キャリア迷子（25-35歳）",icon:"💼",scenarios:[{current:"毎朝満員電車に揺られて、本当にこのままでいいの？",choices:[{type:"safe",label:"現職継続",outcome:"安定だけど成長停滞"},{type:"adventure",label:"転職挑戦",outcome:"リスクあるけど新たな可能性"},{type:"creative",label:"独立起業",outcome:"最大リスク、最大リターン"}]}]},loveWorrier:{id:"love-worrier",name:"恋愛悩み（20-30歳）",icon:"💕",scenarios:[{current:"彼との関係、このまま続けるべき？",choices:[{type:"safe",label:"関係継続",outcome:"安定だけどマンネリ"},{type:"adventure",label:"距離を置く",outcome:"客観視で関係改善の可能性"},{type:"creative",label:"別れを選ぶ",outcome:"痛みの後に新たな出会い"}]}]},healthSeeker:{id:"health-seeker",name:"健康改善希望（30-50歳）",icon:"🌱",scenarios:[{current:"ストレスと疲労で体調不良が続いている",choices:[{type:"safe",label:"生活習慣改善",outcome:"徐々に体調回復"},{type:"adventure",label:"転職・環境変化",outcome:"ストレス源から解放"},{type:"creative",label:"ライフスタイル革命",outcome:"人生全体の質向上"}]}]}}}async init(e){this.container=e,console.log("🌟 Initializing Future Branching System...");try{return this.setupContainer(),this.bindEvents(),await this.loadSavedData(),console.log("✅ Future Branching System initialized"),!0}catch(t){return console.error("❌ Failed to initialize:",t),!1}}setupContainer(){if(!this.container)return void console.error("Container not found");this.container.classList.add("future-branching-container"),this.container.innerHTML='\n      <div class="branching-header mb-4">\n        <h2 class="text-2xl font-bold text-center mb-2">🌟 未来分岐ビジュアライザー</h2>\n        <p class="text-center text-secondary">あなたの選択が導く可能性を可視化</p>\n      </div>\n      \n      <div class="layout-selector mb-4 text-center">\n        <button class="layout-btn" data-layout="classic">クラシック</button>\n        <button class="layout-btn" data-layout="timeline">タイムライン</button>\n        <button class="layout-btn" data-layout="radial">放射状</button>\n      </div>\n      \n      <div class="persona-selector mb-4 text-center">\n        <span class="text-sm text-secondary mr-2">ペルソナ選択:</span>\n        <select id="persona-select" class="haqei-input inline-block w-auto">\n          <option value="">カスタム</option>\n          <option value="career-seeker">キャリア迷子</option>\n          <option value="love-worrier">恋愛悩み</option>\n          <option value="health-seeker">健康改善</option>\n        </select>\n      </div>\n      \n      <div id="branching-diagram" class="branching-diagram layout-classic">\n        \x3c!-- Dynamic content will be inserted here --\x3e\n      </div>\n      \n      <div class="voting-section mt-4" style="display: none;">\n        <h3 class="text-lg font-semibold mb-2">みんなの選択</h3>\n        <div id="voting-results"></div>\n      </div>\n    ';this.container.querySelectorAll(".layout-btn").forEach(e=>{e.style.cssText="\n        background: #2563eb;\n        color: white;\n        padding: 0.5rem 1rem;\n        border-radius: 0.5rem;\n        margin: 0 0.25rem;\n        border: none;\n        cursor: pointer;\n        transition: all 0.3s;\n      ",e.addEventListener("mouseenter",()=>{e.style.background="#1d4ed8",e.style.transform="translateY(-2px)"}),e.addEventListener("mouseleave",()=>{e.style.background="#2563eb",e.style.transform="translateY(0)"})})}bindEvents(){this.container.querySelectorAll(".layout-btn").forEach(e=>{e.addEventListener("click",e=>{this.changeLayout(e.target.dataset.layout)})});const e=this.container.querySelector("#persona-select");e&&e.addEventListener("change",e=>{this.loadPersonaScenario(e.target.value)})}createBranching(e){const t=this.container.querySelector("#branching-diagram");if(t){switch(this.currentState=e.current,this.choices=e.choices||[],this.outcomes=e.outcomes||[],this.layoutType){case"timeline":this.renderTimelineLayout(t);break;case"radial":this.renderRadialLayout(t);break;default:this.renderClassicLayout(t)}this.animationEnabled&&this.applyAnimations()}}renderClassicLayout(e){e.className="branching-diagram layout-classic";let t=`\n      \x3c!-- Current State --\x3e\n      <div class="current-row">\n        <div class="branching-node current-state animate-current">\n          <span class="node-icon icon-current"></span>\n          <h3 class="text-lg font-semibold mb-2">現在の状況</h3>\n          <p>${this.currentState||"あなたの現在の状況を入力してください"}</p>\n        </div>\n      </div>\n      \n      \x3c!-- Connection Lines --\x3e\n      <div style="height: 40px; position: relative;">\n        <svg width="100%" height="40" style="position: absolute; top: 0; left: 0;">\n          <line x1="50%" y1="0" x2="16.66%" y2="40" stroke="rgba(255,255,255,0.3)" stroke-width="2"/>\n          <line x1="50%" y1="0" x2="50%" y2="40" stroke="rgba(255,255,255,0.3)" stroke-width="2"/>\n          <line x1="50%" y1="0" x2="83.33%" y2="40" stroke="rgba(255,255,255,0.3)" stroke-width="2"/>\n        </svg>\n      </div>\n      \n      \x3c!-- Choices --\x3e\n      <div class="choices-row">`;this.choices.forEach((e,n)=>{const i=this.getChoiceClass(e.type),a=this.getIconClass(e.type);t+=`\n        <div class="branching-node ${i} animate-choice choice-selector" data-choice="${n}">\n          <span class="node-icon ${a}"></span>\n          <h4 class="font-semibold mb-1">${e.label}</h4>\n          <p class="text-sm">${e.description||""}</p>\n          ${this.votingData[n]?`\n            <div class="voting-display">${this.votingData[n]}%</div>\n            <div class="voting-bar">\n              <div class="voting-bar-fill" style="width: ${this.votingData[n]}%"></div>\n            </div>\n          `:""}\n        </div>`}),t+='</div>\n      \n      \x3c!-- Outcomes --\x3e\n      <div class="outcomes-row mt-4">',this.outcomes.forEach((e,n)=>{const i=this.getOutcomeClass(e.type),a=e.icon||"icon-success";t+=`\n        <div class="branching-node ${i} animate-outcome" style="animation-delay: ${.5+.1*n}s">\n          <span class="node-icon ${a}"></span>\n          <h4 class="font-semibold mb-1">${e.label}</h4>\n          <p class="text-sm">${e.description}</p>\n          <div class="text-xs mt-2 opacity-75">${e.timeframe||"3ヶ月後"}</div>\n        </div>`}),t+="</div>",e.innerHTML=t,this.bindChoiceEvents()}renderTimelineLayout(e){e.className="branching-diagram layout-timeline";const t=[{label:"現在",nodes:[this.currentState]},{label:"選択",nodes:this.choices},{label:"1ヶ月後",nodes:this.getOutcomesForTime("1month")},{label:"3ヶ月後",nodes:this.getOutcomesForTime("3months")},{label:"1年後",nodes:this.getOutcomesForTime("1year")}];let n="";t.forEach((e,t)=>{n+=`\n        <div class="timeline-stage">\n          <div class="timeline-label">${e.label}</div>\n          <div class="timeline-choices">`,e.nodes.forEach((e,i)=>{if("string"==typeof e)n+=`\n            <div class="branching-node current-state" style="animation-delay: ${.2*t}s">\n              <p>${e}</p>\n            </div>`;else{const a=e.type?this.getChoiceClass(e.type):"outcome-neutral";n+=`\n            <div class="branching-node ${a} animate-choice" style="animation-delay: ${.2*t+.1*i}s">\n              <h4 class="font-semibold">${e.label}</h4>\n              <p class="text-sm">${e.description||""}</p>\n            </div>`}}),n+="</div></div>"}),e.innerHTML=n}renderRadialLayout(e){e.className="branching-diagram layout-radial";let t=`\n      \x3c!-- Center Node --\x3e\n      <div class="center-node">\n        <div class="branching-node current-state animate-current">\n          <span class="node-icon icon-current"></span>\n          <h3 class="text-lg font-semibold">現在</h3>\n          <p class="text-sm">${this.currentState}</p>\n        </div>\n      </div>`;this.choices.forEach((e,n)=>{const i=120*n*Math.PI/180,a=200*Math.cos(i-Math.PI/2),s=200*Math.sin(i-Math.PI/2),o=this.getChoiceClass(e.type),c=this.getIconClass(e.type);t+=`\n        <div class="choice-node animate-choice" style="transform: translate(${a}px, ${s}px); animation-delay: ${.2*n}s">\n          <div class="branching-node ${o} choice-selector" data-choice="${n}">\n            <span class="node-icon ${c}"></span>\n            <h4 class="font-semibold">${e.label}</h4>\n          </div>\n        </div>`}),e.innerHTML=t}getChoiceClass(e){return{safe:"choice-safe",adventure:"choice-adventure",creative:"choice-creative"}[e]||"choice-safe"}getIconClass(e){return{safe:"icon-safe",adventure:"icon-adventure",creative:"icon-creative"}[e]||"icon-current"}getOutcomeClass(e){return{positive:"outcome-positive",neutral:"outcome-neutral",challenging:"outcome-challenging"}[e]||"outcome-neutral"}applyAnimations(){this.container.querySelectorAll(".branching-node").forEach((e,t)=>{e.style.opacity="0",setTimeout(()=>{e.style.opacity="1",e.classList.add("fade-in")},100*t)})}bindChoiceEvents(){this.container.querySelectorAll(".choice-selector").forEach(e=>{e.addEventListener("click",e=>{this.selectChoice(e.currentTarget.dataset.choice)})})}selectChoice(e){this.container.querySelectorAll(".choice-selector").forEach((t,n)=>{n===parseInt(e)?(t.classList.add("selected"),t.classList.remove("unselected"),this.selectedChoice=n):(t.classList.remove("selected"),t.classList.add("unselected"))}),this.highlightOutcome(e),this.updateVoting(e)}highlightOutcome(e){this.container.querySelectorAll(".outcomes-row .branching-node").forEach((t,n)=>{n===parseInt(e)?t.classList.add("pulse-effect"):t.classList.remove("pulse-effect")})}changeLayout(e){this.layoutType=e;this.container.querySelectorAll(".layout-btn").forEach(t=>{t.dataset.layout===e?t.style.background="#1d4ed8":t.style.background="#2563eb"}),this.currentState&&this.createBranching({current:this.currentState,choices:this.choices,outcomes:this.outcomes})}loadPersonaScenario(e){if(!e)return void this.showCustomInput();const t=this.personaTemplates[e];if(t&&t.scenarios[0]){const e=t.scenarios[0],n=e.choices.map(e=>({type:e.type,label:e.label,description:e.outcome})),i=e.choices.map(e=>({type:"safe"===e.type?"neutral":"creative"===e.type?"positive":"challenging",label:e.outcome,description:this.generateOutcomeDescription(e.type),timeframe:"3ヶ月後"}));this.createBranching({current:e.current,choices:n,outcomes:i}),this.showVotingSection()}}generateOutcomeDescription(e){return{safe:"着実な前進。リスクは最小限に抑えられました。",adventure:"新しい挑戦により、予想外の成長を遂げました。",creative:"創造的な選択が、大きな変革をもたらしました。"}[e]||""}showCustomInput(){const e=this.container.querySelector("#branching-diagram");e.innerHTML='\n      <div class="custom-input-section">\n        <h3 class="text-lg font-semibold mb-3">カスタムシナリオ作成</h3>\n        \n        <div class="mb-3">\n          <label class="block text-sm mb-1">現在の状況</label>\n          <textarea id="custom-current" class="haqei-input" rows="3" \n            placeholder="例: 毎日同じルーティンで、何か変化が欲しいと感じている"></textarea>\n        </div>\n        \n        <div class="mb-3">\n          <label class="block text-sm mb-1">選択肢1 (安全)</label>\n          <input type="text" id="custom-choice-1" class="haqei-input" \n            placeholder="例: 現状維持">\n        </div>\n        \n        <div class="mb-3">\n          <label class="block text-sm mb-1">選択肢2 (挑戦)</label>\n          <input type="text" id="custom-choice-2" class="haqei-input" \n            placeholder="例: 新しいスキル習得">\n        </div>\n        \n        <div class="mb-3">\n          <label class="block text-sm mb-1">選択肢3 (創造)</label>\n          <input type="text" id="custom-choice-3" class="haqei-input" \n            placeholder="例: 独自のプロジェクト開始">\n        </div>\n        \n        <button id="create-custom" class="haqei-button">シナリオ作成</button>\n      </div>\n    ';e.querySelector("#create-custom").addEventListener("click",()=>{this.createCustomScenario()})}createCustomScenario(){const e=document.getElementById("custom-current").value,t=document.getElementById("custom-choice-1").value,n=document.getElementById("custom-choice-2").value,i=document.getElementById("custom-choice-3").value;if(!(e&&t&&n&&i))return void alert("すべての項目を入力してください");const a=[{type:"safe",label:t,description:"安定した選択"},{type:"adventure",label:n,description:"挑戦的な選択"},{type:"creative",label:i,description:"創造的な選択"}];this.createBranching({current:e,choices:a,outcomes:[{type:"neutral",label:"着実な成果",description:"予想通りの結果が得られました",timeframe:"3ヶ月後"},{type:"challenging",label:"成長の機会",description:"困難もありますが、大きく成長しました",timeframe:"3ヶ月後"},{type:"positive",label:"大きな成功",description:"想像以上の成果を達成しました",timeframe:"3ヶ月後"}]}),this.showVotingSection()}showVotingSection(){const e=this.container.querySelector(".voting-section");e&&(e.style.display="block",this.initializeVoting())}initializeVoting(){this.votingData={0:Math.floor(40*Math.random())+20,1:Math.floor(40*Math.random())+20,2:Math.floor(40*Math.random())+20};const e=Object.values(this.votingData).reduce((e,t)=>e+t,0);Object.keys(this.votingData).forEach(t=>{this.votingData[t]=Math.round(this.votingData[t]/e*100)}),this.updateVotingDisplay()}updateVotingDisplay(){const e=this.container.querySelector("#voting-results");if(!e)return;let t='<div class="voting-results-grid">';this.choices.forEach((e,n)=>{const i=this.votingData[n]||0;t+=`\n        <div class="voting-item mb-2">\n          <div class="flex justify-between mb-1">\n            <span>${e.label}</span>\n            <span class="font-semibold">${i}%</span>\n          </div>\n          <div class="voting-bar">\n            <div class="voting-bar-fill" style="width: ${i}%"></div>\n          </div>\n        </div>`}),t+="</div>",e.innerHTML=t}updateVoting(e){this.votingData[e]=(this.votingData[e]||0)+1;const t=Object.values(this.votingData).reduce((e,t)=>e+t,0);Object.keys(this.votingData).forEach(e=>{this.votingData[e]=Math.round(this.votingData[e]/t*100)}),this.updateVotingDisplay()}getOutcomesForTime(e){return{"1month":[{label:"初期変化",description:"小さな変化が始まる"},{label:"適応期",description:"新しい環境に慣れ始める"},{label:"探索期",description:"可能性を探る"}],"3months":[{label:"成果出現",description:"具体的な成果が見え始める"},{label:"挑戦継続",description:"困難を乗り越えながら前進"},{label:"創造開花",description:"独自の価値が形になる"}],"1year":[{label:"安定成長",description:"着実な成長を実現"},{label:"大きな飛躍",description:"予想を超える成果"},{label:"新境地開拓",description:"全く新しい道を切り開く"}]}[e]||[]}async loadSavedData(){try{const e=localStorage.getItem("futureBranchingData");if(e){const t=JSON.parse(e);this.votingData=t.votingData||{}}}catch(e){console.log("No saved data found")}}saveData(){try{const e={votingData:this.votingData,lastUpdated:(new Date).toISOString()};localStorage.setItem("futureBranchingData",JSON.stringify(e))}catch(e){console.error("Failed to save data:",e)}}}window.FutureBranchingSystem=FutureBranchingSystem;