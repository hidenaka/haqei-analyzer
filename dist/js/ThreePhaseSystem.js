class PhaseManager{constructor(e,t){this.currentPhase=0,this.maxPhases=3,this.decisions=[],this.states=[{hex:e,line:t,phase:0}]}advanceLine(e,t){return{hex:e,line:t<6?t+1:1}}changeHexagram(e,t){if("undefined"!=typeof window&&window.kingWenMapping){return{hex:window.kingWenMapping.calculateTransformedHex(e,t)||e%64+1,line:t}}return{hex:(e-1+7*t)%64+1,line:t}}makeDecision(e){if(this.currentPhase>=this.maxPhases)return!1;const t=this.states[this.states.length-1];let n;if("jin"===e)n=this.advanceLine(t.hex,t.line);else{if("heng"!==e)throw new Error('Invalid choice: must be "jin" or "heng"');n=this.changeHexagram(t.hex,t.line)}return n.phase=this.currentPhase+1,this.decisions.push(e),this.states.push(n),this.currentPhase++,!0}getCurrentState(){return this.states[this.states.length-1]}reset(){const e=this.states[0];this.currentPhase=0,this.decisions=[],this.states=[{hex:e.hex,line:e.line,phase:0}]}getAllPaths(){const e=[];return["JJJ","JJH","JHJ","JHH","HJJ","HJH","HHJ","HHH"].forEach(t=>{const n=new PhaseManager(this.states[0].hex,this.states[0].line);for(let e of t)n.makeDecision("J"===e?"jin":"heng");e.push({pattern:t,patternDisplay:this.formatPattern(t),decisions:n.decisions,finalState:n.getCurrentState(),path:n.states,description:this.generateDescription(t,n.states)})}),e}formatPattern(e){const t={J:"進",H:"変"};return e.split("").map(e=>t[e]).join("-")}generateDescription(e,t){const n=[];for(let r=1;r<t.length;r++){t[r-1];const s=t[r],a="J"===e[r-1]?"進爻":"変爻";n.push(`第${r}段階: ${a}で卦${s.hex}・爻${s.line}へ`)}return n.join(" → ")}}class CombinationGenerator{constructor(){this.patterns=["JJJ","JJH","JHJ","JHH","HJJ","HJH","HHJ","HHH"]}generateAllCombinations(e,t){return new PhaseManager(e,t).getAllPaths()}interpretPattern(e){return{JJJ:"一貫してテーマを深める道",JJH:"深めた後に転換する道",JHJ:"転換後に新テーマを深める道",JHH:"早期転換から更に変化する道",HJJ:"転換後に着実に進む道",HJH:"変化と深化を繰り返す道",HHJ:"連続転換後に定着する道",HHH:"常に新しい方向を探る道"}[e]||"独自の道"}}class ChoicePresenter{constructor(){this.h384Data=null,this.loadH384Data()}loadH384Data(){"undefined"!=typeof H384_DATA&&(this.h384Data=H384_DATA)}getKeywords(e,t){if(this.h384Data){const n=6*(e-1)+t-1,r=this.h384Data[n];if(r)return{keyword:r["キーワード"][0]||"変化",theme:r["現代解釈の要約"]||"新たな展開"}}return{keyword:`卦${e}爻${t}`,theme:"状況の展開"}}presentChoices(e,t,n){const r=this.getKeywords(e,t),s=new PhaseManager(e,t);return{phase:n+1,current:{hex:e,line:t,keyword:r.keyword,theme:r.theme,display:`卦${e}・爻${t}「${r.keyword}」`},jin:{action:"進爻：テーマに沿って進む",description:`「${r.keyword}」のテーマを深める`,next:s.advanceLine(e,t),nextKeywords:this.getKeywords(s.advanceLine(e,t).hex,s.advanceLine(e,t).line)},heng:{action:"変爻：新しい方向へ転換",description:`「${r.keyword}」から新たな展開へ`,next:s.changeHexagram(e,t),nextKeywords:this.getKeywords(s.changeHexagram(e,t).hex,s.changeHexagram(e,t).line)}}}interpretFinalState(e,t){const n=e[e.length-1],r=this.getKeywords(n.hex,n.line);return{pattern:t,interpretation:(new CombinationGenerator).interpretPattern(t),finalHex:n.hex,finalLine:n.line,finalKeyword:r.keyword,finalTheme:r.theme,journey:e.map((e,t)=>{const n=this.getKeywords(e.hex,e.line);return{phase:t,hex:e.hex,line:e.line,keyword:n.keyword}})}}}"undefined"!=typeof window&&(window.PhaseManager=PhaseManager,window.CombinationGenerator=CombinationGenerator,window.ChoicePresenter=ChoicePresenter,window.initThreePhaseSystem=function(e=1,t=1){const n=new PhaseManager(e,t),r=new CombinationGenerator,s=new ChoicePresenter;return{manager:n,generator:r,presenter:s,getCurrentChoices:function(){const e=n.getCurrentState();return s.presentChoices(e.hex,e.line,n.currentPhase)},makeChoice:function(e){return n.makeDecision(e)},getAllScenarios:function(){return r.generateAllCombinations(e,t).map(e=>s.interpretFinalState(e.path,e.pattern))},reset:function(){n.reset()}}},console.log("✅ ThreePhaseSystem loaded successfully")),"undefined"!=typeof module&&module.exports&&(module.exports={PhaseManager:PhaseManager,CombinationGenerator:CombinationGenerator,ChoicePresenter:ChoicePresenter});