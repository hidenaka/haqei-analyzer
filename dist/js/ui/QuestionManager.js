class QuestionManager{constructor(e={}){this.container=e.container||null,this.displayController=e.displayController||null,this.storageManager=e.storageManager||null,this.questions=[],this.currentIndex=0,this.answers=new Map,this.renderedQuestions=new Map,this.eventHandlers=new Map,this.onProgress=e.onProgress||null,this.onComplete=e.onComplete||null,this.onError=e.onError||null,this.metrics={renderCount:0,totalRenderTime:0,errorCount:0,startTime:Date.now()},console.log("📋 QuestionManager v2.0 initialized")}async initialize(){try{return console.log("📋 QuestionManager initializing..."),await this.loadQuestions(),this.displayController||"undefined"==typeof DisplayController||(this.displayController=new DisplayController({container:this.container,debugMode:!0,autoFix:!0})),this.setupEventListeners(),console.log(`📋 QuestionManager initialized with ${this.questions.length} questions`),!0}catch(e){return console.error("❌ QuestionManager initialization failed:",e),this.metrics.errorCount++,!1}}async loadQuestions(){try{let e=[];if("undefined"!=typeof WORLDVIEW_QUESTIONS&&(e=e.concat(WORLDVIEW_QUESTIONS)),"undefined"!=typeof SCENARIO_QUESTIONS&&(e=e.concat(SCENARIO_QUESTIONS)),0===e.length)throw new Error("No question data available");return this.questions=this.shuffleQuestions(e),this.questions.length>30&&(this.questions=this.questions.slice(0,30)),console.log(`📋 Loaded ${this.questions.length} questions`),!0}catch(e){return console.error("❌ Failed to load questions:",e),this.questions=this.generateFallbackQuestions(),!1}}shuffleQuestions(e){const t=[...e];for(let s=t.length-1;s>0;s--){const e=Math.floor(Math.random()*(s+1));[t[s],t[e]]=[t[e],t[s]]}return t}async showCurrentQuestion(){const e=performance.now();try{const t=this.questions[this.currentIndex];if(!t)throw new Error("No current question available");console.log(`📋 Showing question ${this.currentIndex+1}/${this.questions.length}: ${t.id}`),this.clearContainer();const s=await this.createQuestionElement(t);if(this.container&&this.container.appendChild(s),this.displayController){await this.displayController.ensureElementVisible(s,{forceDisplay:!0,useImportant:!0,clearConflicts:!0,observeChanges:!0})||console.warn(`⚠️ Failed to ensure visibility for question ${t.id}`)}this.restoreAnswer(s,t.id),this.renderedQuestions.set(t.id,{element:s,renderTime:performance.now()-e,timestamp:Date.now()}),this.metrics.renderCount++,this.metrics.totalRenderTime+=performance.now()-e,this.reportProgress(),console.log(`✅ Question ${t.id} rendered in ${(performance.now()-e).toFixed(2)}ms`)}catch(t){console.error(`❌ Failed to show question ${this.currentIndex}:`,t),this.metrics.errorCount++,this.onError&&this.onError(t)}}async createQuestionElement(e){if("undefined"!=typeof HaqeiQuestionElement){const t=document.createElement("haqei-question");return t.dataset.questionId=e.id,t.dataset.questionType=this.getQuestionType(e),t.setAttribute("animated",""),t}return this.createFallbackQuestionElement(e)}createFallbackQuestionElement(e){const t=document.createElement("div");return t.className="question-fallback",t.innerHTML=`\n      <div class="question-header">\n        <h3>${e.title||e.question||"Question"}</h3>\n      </div>\n      <div class="question-content">\n        <p>質問の表示でエラーが発生しました。ページを再読み込みしてください。</p>\n        <button onclick="window.location.reload()">再読み込み</button>\n      </div>\n    `,t}getQuestionType(e){return e.scenario||e.options&&"object"==typeof e.options&&!Array.isArray(e.options)?"scenario":"value"}clearContainer(){if(this.container){this.container.querySelectorAll("haqei-question, .question-fallback").forEach(e=>{e.cleanup&&"function"==typeof e.cleanup&&e.cleanup(),e.remove()})}}handleAnswer(e,t){console.log(`📝 Answer received for ${e}:`,t),this.answers.set(e,{...t,timestamp:Date.now(),questionIndex:this.currentIndex}),this.storageManager&&this.storageManager.saveAnswer(e,t),setTimeout(()=>{this.nextQuestion()},500)}restoreAnswer(e,t){const s=this.answers.get(t);s&&e.restoreAnswer&&e.restoreAnswer(s)}async nextQuestion(){this.currentIndex<this.questions.length-1?(this.currentIndex++,await this.showCurrentQuestion()):this.completeQuestionnaire()}async previousQuestion(){this.currentIndex>0&&(this.currentIndex--,await this.showCurrentQuestion())}async jumpToQuestion(e){e>=0&&e<this.questions.length&&(this.currentIndex=e,await this.showCurrentQuestion())}reportProgress(){const e={currentIndex:this.currentIndex,totalQuestions:this.questions.length,answeredCount:this.answers.size,progressPercentage:(this.currentIndex+1)/this.questions.length*100};this.onProgress&&this.onProgress(e)}completeQuestionnaire(){console.log("🎊 Questionnaire completed!");const e=Array.from(this.answers.entries()).map(([e,t])=>({questionId:e,...t})),t={totalTime:Date.now()-this.metrics.startTime,averageRenderTime:this.metrics.totalRenderTime/this.metrics.renderCount,errorRate:this.metrics.errorCount/this.metrics.renderCount,completionRate:this.answers.size/this.questions.length*100};console.log("📊 Completion metrics:",t),this.onComplete&&this.onComplete({answers:e,metrics:t,originalAnswers:e,preparedAnswers:this.prepareAnswersForAnalysis(e)})}prepareAnswersForAnalysis(e){return e.map(e=>({questionId:e.questionId,selectedValue:e.value||e.selectedValue,selectedChoice:e.selectedChoice||`${e.questionId}${e.value}`,choiceText:e.choiceText||e.text,scoringTags:e.scoringTags||[],timestamp:e.timestamp,choiceType:e.choiceType||null}))}setupEventListeners(){this.container&&this.container.addEventListener("answer-change",e=>{const{questionId:t,value:s,scoringTags:n,choiceType:i}=e.detail;this.handleAnswer(t,{value:s,scoringTags:n,choiceType:i,selectedValue:s,choiceText:e.target.textContent||`選択肢${s}`})}),console.log("📋 Event listeners set up")}generateFallbackQuestions(){const e=[];for(let t=1;t<=5;t++)e.push({id:`fallback_${t}`,title:`デモ質問 ${t}`,question:`これは質問データ読み込み失敗時のデモ質問です（${t}/5）`,options:[{id:"a",text:"選択肢A",scoring_tags:[]},{id:"b",text:"選択肢B",scoring_tags:[]},{id:"c",text:"選択肢C",scoring_tags:[]}]});return e}getStats(){return{...this.metrics,questionsLoaded:this.questions.length,currentProgress:this.currentIndex+1,answersCollected:this.answers.size,completionRate:this.answers.size/this.questions.length*100,displayControllerStats:this.displayController?this.displayController.getStats():null}}destroy(){this.clearContainer(),this.displayController&&this.displayController.destroy(),this.eventHandlers.clear(),console.log("📋 QuestionManager destroyed",this.getStats())}}"undefined"!=typeof window&&(window.QuestionManager=QuestionManager),"undefined"!=typeof module&&module.exports&&(module.exports=QuestionManager);