class HAQEIConfigurationManager{constructor(e={}){this.version="1.0.0-config-manager",this.initialized=!1,this.defaultConfig={system:{environment:"production",debugMode:!1,verboseLogging:!1,performanceMode:"balanced",memoryOptimization:!0},errorHandling:{maxErrorHistory:200,maxRetryAttempts:3,gracefulDegradationEnabled:!0,HaQeiModeEnabled:!0,tripleOSIntegrationEnabled:!0,userFriendlyMessages:!0,autoRecoveryEnabled:!0,logLevel:"info"},integration:{backwardCompatibility:!0,autoDiscovery:!0,migrationStrategy:"gradual",integrationTimeout:1e4,retryFailedIntegrations:!0},performance:{enableLazyLoading:!0,enableCodeSplitting:!0,enableCaching:!0,cacheTimeout:3e5,memoryCleanupInterval:6e4,metricsCollectionInterval:3e4},ui:{showNotifications:!0,notificationDuration:5e3,showDebugPanel:!1,showPerformanceMetrics:!1,theme:"auto",animations:!0},developer:{enableConsoleLogging:!0,enableSourceMaps:!1,enableProfiling:!1,enableDetailedErrors:!1,mockMode:!1}},this.currentConfig={},this.environmentProfiles={development:{system:{debugMode:!0,verboseLogging:!0},errorHandling:{logLevel:"debug"},ui:{showDebugPanel:!0,showPerformanceMetrics:!0},developer:{enableConsoleLogging:!0,enableDetailedErrors:!0}},staging:{system:{debugMode:!1,verboseLogging:!1},errorHandling:{logLevel:"info"},ui:{showDebugPanel:!1,showPerformanceMetrics:!0},developer:{enableConsoleLogging:!0,enableDetailedErrors:!1}},production:{system:{debugMode:!1,verboseLogging:!1},errorHandling:{logLevel:"warn"},ui:{showDebugPanel:!1,showPerformanceMetrics:!1},developer:{enableConsoleLogging:!1,enableDetailedErrors:!1}}},this.configChangeListeners=new Map,this.validationRules=new Map,this.configHistory=[],this.maxHistorySize=10,this.initialize(e),console.log(`‚öôÔ∏è HAQEIConfigurationManager v${this.version} initialized`)}initialize(e={}){const o=this.detectEnvironment();this.currentConfig=this.mergeConfigurations(this.defaultConfig,this.environmentProfiles[o]||{},e),this.currentConfig.system.environment=o,this.setupValidationRules(),this.loadFromStorage(),this.validateConfiguration(),this.loadFromURLParams(),this.initialized=!0,console.log(`‚öôÔ∏è Configuration initialized for environment: ${this.currentConfig.system.environment}`)}detectEnvironment(){const e=window.location.hostname;return"localhost"===e||e.startsWith("127.")||e.startsWith("192.168.")?"development":e.includes("staging")||e.includes("test")?"staging":"file:"===window.location.protocol||window.location.search.includes("debug=true")||window.location.hash.includes("debug")?"development":"production"}mergeConfigurations(...e){return e.reduce((e,o)=>this.deepMerge(e,o),{})}deepMerge(e,o){const i={...e};for(const n in o)o[n]&&"object"==typeof o[n]&&!Array.isArray(o[n])?i[n]=this.deepMerge(i[n]||{},o[n]):i[n]=o[n];return i}setupValidationRules(){this.validationRules.set("system.environment",e=>["development","staging","production"].includes(e)),this.validationRules.set("system.performanceMode",e=>["fast","balanced","thorough"].includes(e)),this.validationRules.set("errorHandling.maxErrorHistory",e=>"number"==typeof e&&e>0&&e<=1e3),this.validationRules.set("errorHandling.maxRetryAttempts",e=>"number"==typeof e&&e>=0&&e<=10),this.validationRules.set("errorHandling.logLevel",e=>["debug","info","warn","error","silent"].includes(e)),this.validationRules.set("performance.cacheTimeout",e=>"number"==typeof e&&e>=0),this.validationRules.set("performance.memoryCleanupInterval",e=>"number"==typeof e&&e>=1e3)}validateConfiguration(e=this.currentConfig){const o=[];if(this.validationRules.forEach((i,n)=>{const t=this.getNestedValue(e,n);void 0===t||i(t)||o.push(`Invalid configuration value for ${n}: ${t}`)}),o.length>0&&(console.warn("‚ö†Ô∏è Configuration validation errors:",o),this.currentConfig.system.debugMode))throw new Error(`Configuration validation failed: ${o.join(", ")}`);return o}getNestedValue(e,o){return o.split(".").reduce((e,o)=>e&&void 0!==e[o]?e[o]:void 0,e)}setNestedValue(e,o,i){const n=o.split("."),t=n.pop();n.reduce((e,o)=>(e[o]&&"object"==typeof e[o]||(e[o]={}),e[o]),e)[t]=i}loadFromStorage(){try{const e=localStorage.getItem("haqei_error_config");if(e){const o=JSON.parse(e);this.currentConfig=this.mergeConfigurations(this.currentConfig,o),console.log("‚öôÔ∏è Configuration loaded from localStorage")}}catch(e){console.warn("‚ö†Ô∏è Failed to load configuration from localStorage:",e)}}saveToStorage(){try{localStorage.setItem("haqei_error_config",JSON.stringify(this.currentConfig)),console.log("‚öôÔ∏è Configuration saved to localStorage")}catch(e){console.warn("‚ö†Ô∏è Failed to save configuration to localStorage:",e)}}loadFromURLParams(){const e=new URLSearchParams(window.location.search);e.has("debug")&&(this.set("system.debugMode","true"===e.get("debug")),this.set("system.verboseLogging","true"===e.get("debug")),this.set("ui.showDebugPanel","true"===e.get("debug"))),e.has("logLevel")&&this.set("errorHandling.logLevel",e.get("logLevel")),e.has("performance")&&this.set("system.performanceMode",e.get("performance")),e.has("env")&&this.set("system.environment",e.get("env"))}get(e,o=void 0){const i=this.getNestedValue(this.currentConfig,e);return void 0!==i?i:o}set(e,o,i={}){const{save:n=!0,notify:t=!0,validate:r=!0}=i;if(this.addToHistory(),this.setNestedValue(this.currentConfig,e,o),r){const e=this.validateConfiguration();if(e.length>0&&this.currentConfig.system.debugMode)throw this.rollback(),new Error(`Configuration validation failed: ${e.join(", ")}`)}n&&this.saveToStorage(),t&&this.notifyConfigChange(e,o),console.log(`‚öôÔ∏è Configuration set: ${e} = ${JSON.stringify(o)}`)}setMultiple(e,o={}){const{save:i=!0,notify:n=!0,validate:t=!0}=o;if(this.addToHistory(),Object.entries(e).forEach(([e,o])=>{this.setNestedValue(this.currentConfig,e,o)}),t){const e=this.validateConfiguration();if(e.length>0&&this.currentConfig.system.debugMode)throw this.rollback(),new Error(`Configuration validation failed: ${e.join(", ")}`)}i&&this.saveToStorage(),n&&Object.entries(e).forEach(([e,o])=>{this.notifyConfigChange(e,o)}),console.log("‚öôÔ∏è Multiple configurations set:",e)}applyEnvironmentProfile(e){if(!this.environmentProfiles[e])throw new Error(`Unknown environment profile: ${e}`);const o=this.environmentProfiles[e];this.setMultiple(o,{validate:!0}),this.set("system.environment",e),console.log(`‚öôÔ∏è Applied environment profile: ${e}`)}reset(e=null){this.addToHistory(),e?this.defaultConfig[e]&&(this.currentConfig[e]={...this.defaultConfig[e]},console.log(`‚öôÔ∏è Configuration section reset: ${e}`)):(this.currentConfig={...this.defaultConfig},console.log("‚öôÔ∏è All configuration reset to defaults")),this.saveToStorage(),this.notifyConfigChange("reset",e)}onChange(e,o){this.configChangeListeners.has(e)||this.configChangeListeners.set(e,[]),this.configChangeListeners.get(e).push(o),console.log(`‚öôÔ∏è Change listener added for: ${e}`)}offChange(e,o){if(this.configChangeListeners.has(e)){const i=this.configChangeListeners.get(e),n=i.indexOf(o);n>-1&&(i.splice(n,1),console.log(`‚öôÔ∏è Change listener removed for: ${e}`))}}notifyConfigChange(e,o){this.configChangeListeners.has(e)&&this.configChangeListeners.get(e).forEach(i=>{try{i(o,e)}catch(n){console.error(`‚ö†Ô∏è Configuration change listener error for ${e}:`,n)}}),this.configChangeListeners.has("*")&&this.configChangeListeners.get("*").forEach(i=>{try{i(o,e)}catch(n){console.error("‚ö†Ô∏è Global configuration change listener error:",n)}})}addToHistory(){this.configHistory.unshift({timestamp:Date.now(),config:JSON.parse(JSON.stringify(this.currentConfig))}),this.configHistory.length>this.maxHistorySize&&(this.configHistory=this.configHistory.slice(0,this.maxHistorySize))}rollback(e=1){if(0===this.configHistory.length)return console.warn("‚ö†Ô∏è No configuration history available for rollback"),!1;const o=Math.min(e-1,this.configHistory.length-1),i=this.configHistory[o];return this.currentConfig=JSON.parse(JSON.stringify(i.config)),this.saveToStorage(),console.log(`‚öôÔ∏è Configuration rolled back ${e} step(s)`),!0}export(){return{version:this.version,timestamp:Date.now(),environment:this.currentConfig.system.environment,config:JSON.parse(JSON.stringify(this.currentConfig))}}import(e){try{if(!e.config)throw new Error("Invalid configuration format");this.addToHistory(),this.currentConfig=this.mergeConfigurations(this.defaultConfig,e.config);const o=this.validateConfiguration();if(o.length>0)throw this.rollback(),new Error(`Imported configuration validation failed: ${o.join(", ")}`);return this.saveToStorage(),this.notifyConfigChange("import",e),console.log("‚öôÔ∏è Configuration imported successfully"),!0}catch(o){return console.error("‚ùå Configuration import failed:",o),!1}}getInfo(){return{version:this.version,initialized:this.initialized,environment:this.currentConfig.system.environment,debugMode:this.currentConfig.system.debugMode,configSize:JSON.stringify(this.currentConfig).length,historySize:this.configHistory.length,listenerCount:Array.from(this.configChangeListeners.values()).flat().length}}debug(){this.currentConfig.system.debugMode?(console.group("üîß HAQEI Configuration Debug"),console.log("Version:",this.version),console.log("Environment:",this.currentConfig.system.environment),console.log("Current Config:",this.currentConfig),console.log("Config History:",this.configHistory),console.log("Change Listeners:",this.configChangeListeners),console.log("Validation Rules:",this.validationRules),console.groupEnd()):console.warn("‚ö†Ô∏è Debug mode is disabled")}cleanup(){this.configChangeListeners.clear(),this.configHistory=[],console.log("üßπ HAQEIConfigurationManager cleanup completed")}}"undefined"!=typeof window&&(window.HAQEIConfigurationManager=HAQEIConfigurationManager,window.haqeiConfig||(window.haqeiConfig=new HAQEIConfigurationManager)),"undefined"!=typeof module&&module.exports&&(module.exports=HAQEIConfigurationManager),console.log("‚öôÔ∏è HAQEIConfigurationManager.js loaded - Dynamic configuration management ready");