class DataPersistenceManager{constructor(e={}){this.version="3.0.0-haqei-ultimate",this.philosophyAlignment="haqei-multiplicity",this.dbName="HAQEI_HaQeiDatabase",this.dbVersion=7,this.db=null,this.initialized=!1,this.stores={engineOS:{name:"engine_os_data",keyPath:"id",autoIncrement:!0},interfaceOS:{name:"interface_os_data",keyPath:"id",autoIncrement:!0},safeModeOS:{name:"safe_mode_data",keyPath:"id",autoIncrement:!0},quickAnalysis:{name:"quick_analysis",keyPath:"sessionId"},osAnalysis:{name:"os_analysis",keyPath:"sessionId"},futureSimulation:{name:"future_simulation",keyPath:"sessionId"},strategicCockpit:{name:"strategic_cockpit",keyPath:"sessionId"},professionalReport:{name:"professional_report",keyPath:"sessionId"},dashboard:{name:"dashboard_data",keyPath:"userId"},library:{name:"library_resources",keyPath:"resourceId"},hexagramHistory:{name:"hexagram_history",keyPath:"id",autoIncrement:!0},iChingTransformations:{name:"iching_transformations",keyPath:"transformationId"},fiveElementsFlow:{name:"five_elements_flow",keyPath:"flowId"},sequenceLogic:{name:"sequence_logic",keyPath:"logicId"},personaProfiles:{name:"persona_profiles",keyPath:"personaId"},personaInteractions:{name:"persona_interactions",keyPath:"interactionId"},personaEvolution:{name:"persona_evolution",keyPath:"evolutionId"},sessions:{name:"user_sessions",keyPath:"sessionId"},userPreferences:{name:"user_preferences",keyPath:"userId"},systemMetadata:{name:"system_metadata",keyPath:"metaId"}},this.fallbackStorage={localStorage:"undefined"!=typeof localStorage,sessionStorage:"undefined"!=typeof sessionStorage},this.cache=new Map,this.cacheTimeout=3e5,this.maxCacheSize=1e3,this.initialize(e),console.log(`🧠 HAQEI DataPersistenceManager v${this.version} - HaQei哲学対応初期化開始`)}async initialize(e={}){try{if(!this.isIndexedDBSupported())return console.warn("⚠️ IndexedDB未サポート - フォールバックモードで動作"),void(this.initialized=!0);await this.connectDatabase(),this.validateHaQeiPhilosophy(),await this.initializeTripleOSStores(),await this.initializeNavigationStores(),await this.initializeIChingStores(),this.initialized=!0,console.log("✅ HAQEI DataPersistenceManager初期化完了 - 分人思想完全対応")}catch(t){throw console.error("❌ DataPersistenceManager初期化エラー:",t),this.initialized=!1,t}}isIndexedDBSupported(){return"indexedDB"in window&&void 0!==window.indexedDB&&null!==window.indexedDB}async connectDatabase(){return new Promise((e,t)=>{const a=indexedDB.open(this.dbName,this.dbVersion);a.onerror=()=>{t(new Error(`IndexedDB接続エラー: ${a.error}`))},a.onsuccess=()=>{this.db=a.result,console.log("✅ IndexedDB接続成功"),e(this.db)},a.onupgradeneeded=e=>{const t=e.target.result;console.log(`🔧 データベーススキーマ更新中 (v${e.oldVersion} → v${e.newVersion})`);for(const a of t.objectStoreNames)Object.values(this.stores).find(e=>e.name===a)||(t.deleteObjectStore(a),console.log(`🗑️ 旧ストア削除: ${a}`));Object.entries(this.stores).forEach(([e,a])=>{if(!t.objectStoreNames.contains(a.name)){const s=t.createObjectStore(a.name,{keyPath:a.keyPath,autoIncrement:a.autoIncrement||!1});this.createStoreIndexes(s,e),console.log(`✅ ストア作成: ${a.name}`)}})}})}createStoreIndexes(e,t){const a={engineOS:[{name:"timestamp",keyPath:"timestamp"},{name:"hexagramId",keyPath:"hexagramId"},{name:"userId",keyPath:"userId"}],interfaceOS:[{name:"timestamp",keyPath:"timestamp"},{name:"hexagramId",keyPath:"hexagramId"},{name:"userId",keyPath:"userId"}],safeModeOS:[{name:"timestamp",keyPath:"timestamp"},{name:"hexagramId",keyPath:"hexagramId"},{name:"userId",keyPath:"userId"}],hexagramHistory:[{name:"timestamp",keyPath:"timestamp"},{name:"hexagramNumber",keyPath:"hexagramNumber"},{name:"userId",keyPath:"userId"}],personaProfiles:[{name:"createdAt",keyPath:"createdAt"},{name:"personaType",keyPath:"personaType"},{name:"userId",keyPath:"userId"}]}[t];a&&a.forEach(t=>{try{e.createIndex(t.name,t.keyPath,{unique:!1})}catch(a){console.warn(`⚠️ インデックス作成スキップ: ${t.name}`)}})}validateHaQeiPhilosophy(){const e={rejectsUnifiedSelf:!0,supportsMultiplePersonas:!0,enablesContextualIdentity:!0,maintainsHaQeiAlignment:!0,timestamp:Date.now()};if(!e.rejectsUnifiedSelf)throw new Error("統一self概念が検出されました。HaQei哲学違反です。");return console.log("✅ HaQei哲学検証完了 - 分人思想準拠"),e}async initializeTripleOSStores(){const e=["engineOS","interfaceOS","safeModeOS"];for(const a of e)try{await this.save(a,{id:`${a}_metadata`,type:a,philosophy:"haqei-multiplicity",initialized:!0,timestamp:Date.now()}),console.log(`✅ ${a}ストア初期化完了`)}catch(t){console.warn(`⚠️ ${a}初期化警告:`,t)}}async initializeNavigationStores(){const e=["quickAnalysis","osAnalysis","futureSimulation","strategicCockpit","professionalReport","dashboard","library"];for(const a of e)try{await this.save(a,{sessionId:`${a}_system_metadata`,stageName:a,stageNumber:e.indexOf(a)+1,philosophy:"haqei-navigation",initialized:!0,timestamp:Date.now()}),console.log(`✅ Stage ${e.indexOf(a)+1} (${a})初期化完了`)}catch(t){console.warn(`⚠️ Stage ${a}初期化警告:`,t)}}async initializeIChingStores(){const e=["hexagramHistory","iChingTransformations","fiveElementsFlow","sequenceLogic"];for(const a of e)try{const e={[this.stores[a].keyPath]:`${a}_metadata`,storeName:a,philosophy:"iching-authentic",systemVersion:"5.0.0-comprehensive",initialized:!0,timestamp:Date.now()};await this.save(a,e),console.log(`✅ 易経${a}ストア初期化完了`)}catch(t){console.warn(`⚠️ 易経${a}初期化警告:`,t)}}async save(e,t){if(!this.initialized)return console.warn("⚠️ 未初期化 - フォールバック保存実行"),this.fallbackSave(e,t);try{if(t.unifiedSelf||t.singleIdentity)throw new Error("統一self概念データ検出 - HaQei哲学違反");const a={...t,haqeiCompliant:!0,philosophy:"multiplicity",savedAt:Date.now(),version:this.version},s=await this.performIndexedDBOperation("put",e,a);return this.updateCache(e,a),console.log(`💾 ${e}データ保存完了:`,t[this.stores[e]?.keyPath]||"ID不明"),s}catch(a){return console.error(`❌ ${e}保存エラー:`,a),this.fallbackSave(e,t)}}async get(e,t){if(!this.initialized)return this.fallbackGet(e,t);try{const a=this.getFromCache(e,t);if(a)return console.log(`⚡ ${e}キャッシュヒット`),a;const s=await this.performIndexedDBOperation("get",e,t);return s&&(s.haqeiCompliant||console.warn("⚠️ 非HaQei準拠データ検出"),this.updateCache(e,s)),s}catch(a){return console.error(`❌ ${e}取得エラー:`,a),this.fallbackGet(e,t)}}async getAll(e,t=null){if(!this.initialized)return this.fallbackGetAll(e,t);try{let a=await this.performIndexedDBOperation("getAll",e)||[];return t&&(a=a.filter(t)),a=a.filter(e=>!e.unifiedSelf&&!e.singleIdentity),console.log(`📋 ${e}全データ取得: ${a.length}件`),a}catch(a){return console.error(`❌ ${e}全取得エラー:`,a),this.fallbackGetAll(e,t)}}async delete(e,t){if(!this.initialized)return this.fallbackDelete(e,t);try{const a=await this.performIndexedDBOperation("delete",e,t);return this.removeFromCache(e,t),console.log(`🗑️ ${e}データ削除完了: ${t}`),a}catch(a){return console.error(`❌ ${e}削除エラー:`,a),this.fallbackDelete(e,t)}}async performIndexedDBOperation(e,t,a=null){const s=this.stores[t];if(!s)throw new Error(`未知のストア: ${t}`);return new Promise((t,i)=>{const n=this.db.transaction([s.name],"readwrite").objectStore(s.name);let o;switch(e){case"put":o=n.put(a);break;case"get":o=n.get(a);break;case"getAll":o=n.getAll();break;case"delete":o=n.delete(a);break;default:return void i(new Error(`未対応操作: ${e}`))}o.onsuccess=()=>{t(o.result)},o.onerror=()=>{i(o.error)}})}updateCache(e,t){if(this.cache.size>=this.maxCacheSize){const e=this.cache.keys().next().value;this.cache.delete(e)}const a=`${e}_${t[this.stores[e]?.keyPath]}`;this.cache.set(a,{data:t,timestamp:Date.now()})}getFromCache(e,t){const a=`${e}_${t}`,s=this.cache.get(a);return s&&Date.now()-s.timestamp<this.cacheTimeout?s.data:(s&&this.cache.delete(a),null)}removeFromCache(e,t){const a=`${e}_${t}`;this.cache.delete(a)}fallbackSave(e,t){if(!this.fallbackStorage.localStorage)return console.error("❌ フォールバックストレージ未対応"),!1;try{const a=`haqei_${e}`,s=JSON.parse(localStorage.getItem(a)||"[]");return Array.isArray(s)?(s.push(t),localStorage.setItem(a,JSON.stringify(s))):localStorage.setItem(a,JSON.stringify(t)),console.log(`💾 ${e}フォールバック保存完了`),!0}catch(a){return console.error(`❌ ${e}フォールバック保存エラー:`,a),!1}}fallbackGet(e,t){if(!this.fallbackStorage.localStorage)return null;try{const t=`haqei_${e}`,a=localStorage.getItem(t);return a?JSON.parse(a):null}catch(a){return console.error(`❌ ${e}フォールバック取得エラー:`,a),null}}fallbackGetAll(e,t=null){const a=this.fallbackGet(e,null);if(!a)return[];const s=Array.isArray(a)?a:[a];return t?s.filter(t):s}fallbackDelete(e,t){if(!this.fallbackStorage.localStorage)return!1;try{return localStorage.removeItem(`haqei_${e}`),!0}catch(a){return console.error(`❌ ${e}フォールバック削除エラー:`,a),!1}}async cleanup(){try{const e=Date.now()-6048e5;for(const[t,a]of Object.entries(this.stores)){const s=await this.getAll(t);for(const i of s)i.savedAt&&i.savedAt<e&&await this.delete(t,i[a.keyPath])}this.cache.clear(),console.log("🧹 データクリーンアップ完了")}catch(e){console.error("❌ クリーンアップエラー:",e)}}async getStatistics(){const e={version:this.version,philosophy:this.philosophyAlignment,initialized:this.initialized,databaseConnected:!!this.db,cacheSize:this.cache.size,stores:{}};for(const[a,s]of Object.entries(this.stores))try{const t=await this.getAll(a);e.stores[a]={count:t.length,size:JSON.stringify(t).length}}catch(t){e.stores[a]={count:0,error:t.message}}return e}async exportData(){const e={version:this.version,philosophy:"haqei-multiplicity",timestamp:Date.now(),data:{}};for(const[a,s]of Object.entries(this.stores))try{e.data[a]=await this.getAll(a)}catch(t){e.data[a]=[],console.warn(`⚠️ ${a}エクスポート警告:`,t)}return e}async importData(e){if(!e.philosophy||"haqei-multiplicity"!==e.philosophy)throw new Error("非HaQei準拠データのインポートは拒否されます");let t=0,a=0;for(const[i,n]of Object.entries(e.data))try{for(const e of n)await this.save(i,e),t++}catch(s){a++,console.warn(`⚠️ ${i}インポートエラー:`,s)}return console.log(`📥 インポート完了: 成功${t}件, エラー${a}件`),{success:t,errors:a,total:t+a}}async destroy(){try{this.db&&(this.db.close(),this.db=null),this.cache.clear(),this.initialized=!1,console.log("🔚 DataPersistenceManager破棄完了")}catch(e){console.error("❌ 破棄エラー:",e)}}}"undefined"!=typeof window&&(window.DataPersistenceManager=DataPersistenceManager,window.haqeiPersistence||(window.haqeiPersistence=new DataPersistenceManager)),"undefined"!=typeof module&&module.exports&&(module.exports=DataPersistenceManager),console.log("🧠 DataPersistenceManager.js読み込み完了 - HaQei哲学完全対応IndexedDBシステム");