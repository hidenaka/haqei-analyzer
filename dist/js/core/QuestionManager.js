class QuestionManager{constructor(e={}){this.version="2.0.0-production-ready",this.initialized=!1,this.container=e.container||document.body,this.displayController=e.displayController||null,this.storageManager=e.storageManager||null,this.onProgress=e.onProgress||null,this.onComplete=e.onComplete||null,this.onError=e.onError||null,this.questions=[],this.currentQuestionIndex=0,this.answers=[],this.questionStates=new Map,this.performanceMetrics={renderTime:0,loadTime:0,errorCount:0,successCount:0},this.errorHandler=null,"undefined"!=typeof UnifiedErrorHandler&&(this.errorHandler=new UnifiedErrorHandler({maxErrorHistory:50,gracefulDegradationEnabled:!0,HaQeiModeEnabled:!0})),this.cacheManager=null,"undefined"!=typeof CacheManager&&(this.cacheManager=new CacheManager({maxSize:500,defaultTTL:6e5,enablePrefetch:!1})),console.log(`🎯 QuestionManager v${this.version} constructed`)}async initialize(){if(this.initialized)return!0;console.log("🚀 QuestionManager initialization starting...");const e=performance.now();try{return this.errorHandler&&await this.errorHandler.initialize(),this.cacheManager&&await this.cacheManager.init(),await this.loadQuestionData(),this.displayController||"undefined"==typeof DisplayController||(this.displayController=new DisplayController({container:this.container})),this.setupEventListeners(),this.performanceMetrics.loadTime=performance.now()-e,this.initialized=!0,console.log(`✅ QuestionManager initialized in ${this.performanceMetrics.loadTime.toFixed(2)}ms`),!0}catch(t){return console.error("❌ QuestionManager initialization failed:",t),this.errorHandler&&this.errorHandler.handleError(t,{source:"QuestionManager.initialize",type:"initialization-error"}),this.onError&&this.onError(t),!1}}async loadQuestionData(){try{if(this.cacheManager){const e=this.cacheManager.get("question_data");if(e)return this.questions=e,void console.log(`📋 Loaded ${this.questions.length} questions from cache`)}this.questions=[],"undefined"!=typeof WORLDVIEW_QUESTIONS&&(this.questions=this.questions.concat(WORLDVIEW_QUESTIONS)),"undefined"!=typeof SCENARIO_QUESTIONS&&(this.questions=this.questions.concat(SCENARIO_QUESTIONS)),0===this.questions.length&&(this.questions=this.getFallbackQuestions(),console.warn("⚠️ Using fallback question data")),this.cacheManager&&this.questions.length>0&&this.cacheManager.set("question_data",this.questions,{ttl:36e5}),console.log(`📋 Loaded ${this.questions.length} questions`)}catch(e){console.error("❌ Failed to load question data:",e),this.errorHandler&&this.errorHandler.handleError(e,{source:"QuestionManager.loadQuestionData",type:"data-loading-error"}),this.questions=this.getFallbackQuestions()}}getFallbackQuestions(){return[{id:"fallback_1",text:"価値観について考えてみてください。",type:"value",options:[{value:"A",text:"個人の自由を重視する"},{value:"B",text:"集団の調和を重視する"},{value:"C",text:"バランスを取る"}]},{id:"fallback_2",text:"困難な状況での対応について",type:"scenario",scenario:"重要な決断を迫られた時",options:{A:"慎重に検討する",B:"直感で決める",C:"他者の意見を聞く"}}]}setupEventListeners(){document.addEventListener("keydown",e=>{"ArrowLeft"===e.key?this.previousQuestion():"ArrowRight"===e.key&&this.nextQuestion()}),this.storageManager&&window.addEventListener("beforeunload",()=>{this.saveProgress()})}async showCurrentQuestion(){if(!this.initialized)return console.warn("⚠️ QuestionManager not initialized"),!1;const e=performance.now();try{const t=this.getCurrentQuestion();if(!t)return console.warn("⚠️ No current question available"),!1;this.container.innerHTML="";const n=await this.createQuestionElement(t);return this.displayController?await this.displayController.displayQuestion(n):this.container.appendChild(n),this.questionStates.set(t.id,{displayed:!0,timestamp:Date.now()}),this.performanceMetrics.renderTime=performance.now()-e,this.performanceMetrics.successCount++,console.log(`✅ Question displayed: ${t.id} in ${this.performanceMetrics.renderTime.toFixed(2)}ms`),this.onProgress&&this.onProgress({current:this.currentQuestionIndex+1,total:this.questions.length,question:t}),!0}catch(t){return console.error("❌ Failed to show current question:",t),this.performanceMetrics.errorCount++,this.errorHandler&&this.errorHandler.handleError(t,{source:"QuestionManager.showCurrentQuestion",type:"display-error",questionIndex:this.currentQuestionIndex}),this.showFallbackQuestion()}}async createQuestionElement(e){const t=document.createElement("div");if(t.className="question-container",t.dataset.questionId=e.id,"undefined"!=typeof HaqeiQuestionElement){const t=document.createElement("haqei-question-element");return t.dataset.questionId=e.id,t.dataset.questionType=e.type||"default",t}return t.innerHTML=this.generateQuestionHTML(e),this.bindQuestionEvents(t,e),t}generateQuestionHTML(e){let t=`\n      <div class="question-header">\n        <h3 class="question-title">${this.escapeHtml(e.text)}</h3>\n        <div class="question-progress">\n          ${this.currentQuestionIndex+1} / ${this.questions.length}\n        </div>\n      </div>\n    `;return"scenario"===e.type&&e.scenario&&(t+=`\n        <div class="question-scenario">\n          <p>${this.escapeHtml(e.scenario)}</p>\n        </div>\n      `),t+='<div class="question-options">',Array.isArray(e.options)?e.options.forEach((e,n)=>{t+=`\n          <button class="option-button" data-value="${e.value}" data-index="${n}">\n            <span class="option-label">${e.value}</span>\n            <span class="option-text">${this.escapeHtml(e.text)}</span>\n          </button>\n        `}):"object"==typeof e.options&&Object.entries(e.options).forEach(([e,n])=>{t+=`\n          <button class="option-button" data-value="${e}">\n            <span class="option-label">${e}</span>\n            <span class="option-text">${this.escapeHtml(n)}</span>\n          </button>\n        `}),t+="</div>",t+=`\n      <div class="question-navigation">\n        <button class="nav-button prev-button" ${0===this.currentQuestionIndex?"disabled":""}>\n          前の質問\n        </button>\n        <button class="nav-button next-button" ${this.currentQuestionIndex===this.questions.length-1?"disabled":""}>\n          次の質問\n        </button>\n      </div>\n    `,t}bindQuestionEvents(e,t){e.querySelectorAll(".option-button").forEach(e=>{e.addEventListener("click",()=>{this.selectOption(t.id,e.dataset.value)})});const n=e.querySelector(".prev-button"),s=e.querySelector(".next-button");n&&n.addEventListener("click",()=>this.previousQuestion()),s&&s.addEventListener("click",()=>this.nextQuestion())}selectOption(e,t){console.log(`📝 Option selected: ${e} = ${t}`),this.answers[this.currentQuestionIndex]={questionId:e,value:t,timestamp:Date.now()};const n=this.container.querySelector(`[data-value="${t}"]`);n&&(this.container.querySelectorAll(".option-button").forEach(e=>{e.classList.remove("selected")}),n.classList.add("selected")),this.saveProgress(),setTimeout(()=>{this.currentQuestionIndex<this.questions.length-1?this.nextQuestion():this.completeQuestions()},500)}async previousQuestion(){this.currentQuestionIndex>0&&(this.currentQuestionIndex--,await this.showCurrentQuestion())}async nextQuestion(){this.currentQuestionIndex<this.questions.length-1&&(this.currentQuestionIndex++,await this.showCurrentQuestion())}getCurrentQuestion(){return this.questions[this.currentQuestionIndex]||null}completeQuestions(){console.log("🎉 All questions completed"),this.onComplete&&this.onComplete({answers:this.answers,totalQuestions:this.questions.length,completionTime:Date.now()})}saveProgress(){if(this.storageManager)try{this.storageManager.saveAnswers(this.answers),this.storageManager.saveProgress({currentIndex:this.currentQuestionIndex,timestamp:Date.now()})}catch(e){console.warn("⚠️ Failed to save progress:",e)}}showFallbackQuestion(){this.container.innerHTML='\n      <div class="question-container fallback">\n        <div class="question-header">\n          <h3>質問の読み込みに失敗しました</h3>\n        </div>\n        <div class="question-body">\n          <p>申し訳ありませんが、質問の表示でエラーが発生しました。</p>\n          <button class="retry-button">再試行</button>\n        </div>\n      </div>\n    ';const e=this.container.querySelector(".retry-button");return e&&e.addEventListener("click",()=>{this.showCurrentQuestion()}),!1}escapeHtml(e){if("string"!=typeof e)return"";const t=document.createElement("div");return t.textContent=e,t.innerHTML}getMetrics(){return{...this.performanceMetrics,totalQuestions:this.questions.length,currentIndex:this.currentQuestionIndex,completionRate:this.answers.length/this.questions.length*100}}destroy(){console.log("🧹 QuestionManager cleanup starting..."),this.container&&(this.container.innerHTML=""),this.questions=[],this.answers=[],this.questionStates.clear(),this.cacheManager&&"function"==typeof this.cacheManager.destroy&&this.cacheManager.destroy(),this.errorHandler&&"function"==typeof this.errorHandler.cleanup&&this.errorHandler.cleanup(),this.initialized=!1,console.log("✅ QuestionManager cleanup completed")}}"undefined"!=typeof window&&(window.QuestionManager=QuestionManager),"undefined"!=typeof module&&module.exports&&(module.exports=QuestionManager),console.log("🎯 QuestionManager v2.0 loaded - Production ready");