/**
 * Offline Kuromoji Initializer - Bunenjin Philosophy Implementation
 * Triple OS Architecture: Engine Layer Component
 * 
 * „Ç™„Éï„É©„Ç§„É≥ÂØæÂøúÂΩ¢ÊÖãÁ¥†Ëß£Êûê„Ç®„É≥„Ç∏„É≥ÂàùÊúüÂåñ„Ç∑„Çπ„ÉÜ„É†
 * - „Ç™„É≥„É©„Ç§„É≥/„Ç™„Éï„É©„Ç§„É≥‰∏°Êñπ„Å´ÂØæÂøú
 * - ÊÆµÈöéÁöÑÂìÅË≥™Âêë‰∏ä„Ç¢„Éó„É≠„Éº„ÉÅ
 * - ÁüõÁõæÂèóÂÆπÂûã„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üÊßã
 */

class OfflineKuromojiInitializer {
  constructor() {
    this.initialized = false;
    this.status = 'pending';
    this.tokenizer = null;
    this.fallbackAnalyzer = null;
    this.offlineCache = null;
    this.connectionDetector = null;
    
    // Bunenjin Philosophy: ÂÆåÁíß„Åß„Å™„Åè„Å¶„ÇÇÊ©üËÉΩ„Åô„ÇãË®≠Ë®à
    this.acceptContradiction = {
      perfect_analysis: false,
      working_analysis: true,
      online_preferred: true,
      offline_acceptable: true
    };
    
    // Triple OS Architecture Components
    this.engineOS = null;
    this.interfaceOS = null;
    this.safeMode = null;
    
    this.init();
  }
  
  async init() {
    console.log('üìù [OfflineKuromojiInitializer] ÂàùÊúüÂåñÈñãÂßã - Bunenjin Philosophy');
    
    try {
      // Triple OS Architecture Setup
      this.initializeTripleOS();
      
      // Êé•Á∂öÁä∂ÊÖãÊ§úÂá∫Âô®ÈÄ£Êê∫
      await this.connectToOfflineDetector();
      
      // KuromojiÂàùÊúüÂåñË©¶Ë°åÔºàË§áÊï∞ÊÆµÈöéÔºâ
      await this.attemptKuromojiInitialization();
      
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØËß£ÊûêÂô®Ê∫ñÂÇô
      await this.prepareFallbackAnalyzer();
      
      // „Ç™„Éï„É©„Ç§„É≥„Ç≠„É£„ÉÉ„Ç∑„É•Ë®≠ÂÆö
      await this.setupOfflineCache();
      
      this.status = 'ready';
      this.initialized = true;
      
      console.log('‚úÖ [OfflineKuromojiInitializer] ÂàùÊúüÂåñÂÆå‰∫Ü - ÁüõÁõæÂèóÂÆπ„É¢„Éº„Éâ');
      
    } catch (error) {
      console.warn('‚ö†Ô∏è [OfflineKuromojiInitializer] ÂàùÊúüÂåñË≠¶Âëä - „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„É¢„Éº„Éâ:', error);
      this.activateFallbackMode();
    }
  }
  
  initializeTripleOS() {
    console.log('üîß [OfflineKuromojiInitializer] Triple OS Architecture ÂàùÊúüÂåñ');
    
    // Engine OS (Core Analysis Engine)
    this.engineOS = {
      name: 'Kuromoji Engine OS',
      version: '1.0.0',
      philosophy: 'bunenjin',
      
      async analyzeText(text) {
        if (!text || typeof text !== 'string') {
          return this.createEmptyAnalysis();
        }
        
        // ÂÑ™ÂÖàÈ†Ü‰Ωç: Kuromoji -> È´òÂ∫¶„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ -> Âü∫Êú¨„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        if (this.tokenizer) {
          return await this.kuromojiAnalysis(text);
        } else if (this.fallbackAnalyzer) {
          return await this.advancedFallbackAnalysis(text);
        } else {
          return this.basicFallbackAnalysis(text);
        }
      },
      
      async kuromojiAnalysis(text) {
        try {
          const tokens = this.tokenizer.tokenize(text);
          
          return {
            tokens: tokens.map(token => ({
              surface_form: token.surface_form,
              pos: token.pos,
              pos_detail_1: token.pos_detail_1,
              pos_detail_2: token.pos_detail_2,
              pos_detail_3: token.pos_detail_3,
              conjugated_type: token.conjugated_type,
              conjugated_form: token.conjugated_form,
              basic_form: token.basic_form,
              reading: token.reading,
              pronunciation: token.pronunciation
            })),
            method: 'kuromoji',
            quality: 'high',
            philosophy: 'bunenjin-precise'
          };
        } catch (error) {
          console.warn('‚ö†Ô∏è KuromojiËß£Êûê„Ç®„É©„Éº - „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Å´ÁßªË°å:', error);
          return this.advancedFallbackAnalysis(text);
        }
      },
      
      async advancedFallbackAnalysis(text) {
        // È´òÂ∫¶„Å™„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØËß£ÊûêÔºà„Éë„Çø„Éº„É≥„Éô„Éº„ÇπÔºâ
        const tokens = [];
        const words = this.segmentText(text);
        
        for (const word of words) {
          const analysis = await this.analyzeWord(word);
          tokens.push(analysis);
        }
        
        return {
          tokens: tokens,
          method: 'advanced_fallback',
          quality: 'medium',
          philosophy: 'bunenjin-adaptive'
        };
      },
      
      basicFallbackAnalysis(text) {
        // Âü∫Êú¨„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºàÊúÄ‰ΩéÈôê„ÅÆÂãï‰Ωú‰øùË®ºÔºâ
        const tokens = text
          .replace(/[„ÄÅ„ÄÇÔºÅÔºü]/g, ' ')
          .split(/\s+/)
          .filter(word => word.length > 0)
          .map((word, index) => ({
            surface_form: word,
            pos: this.guessBasicPOS(word),
            basic_form: word,
            index: index
          }));
        
        return {
          tokens: tokens,
          method: 'basic_fallback',
          quality: 'basic',
          philosophy: 'bunenjin-essential'
        };
      },
      
      segmentText(text) {
        // Á∞°ÊòìÊñáÂ≠óÁ®Æ„Éô„Éº„ÇπÂàÜÂâ≤
        const segments = [];
        let currentSegment = '';
        let currentType = null;
        
        for (const char of text) {
          const charType = this.getCharacterType(char);
          
          if (charType !== currentType && currentSegment.length > 0) {
            segments.push(currentSegment);
            currentSegment = char;
            currentType = charType;
          } else {
            currentSegment += char;
            currentType = charType;
          }
        }
        
        if (currentSegment.length > 0) {
          segments.push(currentSegment);
        }
        
        return segments.filter(seg => seg.trim().length > 0);
      },
      
      getCharacterType(char) {
        if (char.match(/[„ÅÇ-„Çì]/)) return 'hiragana';
        if (char.match(/[„Ç¢-„É≥]/)) return 'katakana';
        if (char.match(/[‰∏Ä-ÈæØ]/)) return 'kanji';
        if (char.match(/[a-zA-Z]/)) return 'alphabet';
        if (char.match(/[0-9]/)) return 'number';
        return 'other';
      },
      
      async analyzeWord(word) {
        // ÂçòË™û„É¨„Éô„É´Ëß£ÊûêÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
        const pos = await this.estimatePOS(word);
        const reading = this.estimateReading(word);
        
        return {
          surface_form: word,
          pos: pos,
          basic_form: word,
          reading: reading,
          estimated: true
        };
      },
      
      async estimatePOS(word) {
        // ÂìÅË©ûÊé®ÂÆö„É≠„Ç∏„ÉÉ„ÇØ
        const patterns = {
          'ÂêçË©û': [/[‰∏Ä-ÈæØ]+/, /[„Ç¢-„É≥]+/, /[a-zA-Z]+/],
          'ÂãïË©û': [/„Åô„Çã$/, /„Çå„Çã$/, /„Çâ„Çå„Çã$/],
          'ÂΩ¢ÂÆπË©û': [/„ÅÑ$/, /„Åó„ÅÑ$/, /„Çâ„Åó„ÅÑ$/],
          'ÂâØË©û': [/„Å´$/, /„Åè$/, /„Å®$/],
          'Âä©Ë©û': [/^(„Åå|„Çí|„Å´|„Åß|„Å®|„ÅØ|„ÅÆ|„Åã„Çâ|„Åæ„Åß)$/]
        };
        
        for (const [pos, patternList] of Object.entries(patterns)) {
          if (patternList.some(pattern => pattern.test(word))) {
            return pos;
          }
        }
        
        return 'ÂêçË©û'; // „Éá„Éï„Ç©„É´„Éà
      },
      
      estimateReading(word) {
        // Á∞°ÊòìË™≠„ÅøÊé®ÂÆö
        if (word.match(/[„ÅÇ-„Çì]/)) {
          return word; // „Å≤„Çâ„Åå„Å™„ÅØ„Åù„ÅÆ„Åæ„Åæ
        }
        if (word.match(/[„Ç¢-„É≥]/)) {
          return word; // „Ç´„Çø„Ç´„Éä„ÇÇ„Åù„ÅÆ„Åæ„Åæ
        }
        return null; // Êº¢Â≠ó„ÅÆË™≠„Åø„ÅØÊé®ÂÆöÂõ∞Èõ£
      },
      
      guessBasicPOS(word) {
        if (word.match(/„Åô„Çã$/)) return 'ÂãïË©û';
        if (word.match(/„ÅÑ$/)) return 'ÂΩ¢ÂÆπË©û';
        if (word.match(/^(„Åå|„Çí|„Å´|„Åß|„Å®|„ÅØ|„ÅÆ)$/)) return 'Âä©Ë©û';
        return 'ÂêçË©û';
      },
      
      createEmptyAnalysis() {
        return {
          tokens: [],
          method: 'empty',
          quality: 'none',
          philosophy: 'bunenjin-void'
        };
      }
    };
    
    // Interface OS (User Feedback Layer)
    this.interfaceOS = {
      name: 'Kuromoji Interface OS',
      
      showInitializationStatus(status) {
        const statusMessages = {
          'pending': 'üìù ÂΩ¢ÊÖãÁ¥†Ëß£Êûê„Ç®„É≥„Ç∏„É≥ÂàùÊúüÂåñ‰∏≠...',
          'kuromoji-loading': 'üîÑ È´òÁ≤æÂ∫¶Ëß£Êûê„Ç®„É≥„Ç∏„É≥Ë™≠„ÅøËæº„Åø‰∏≠...',
          'kuromoji-ready': '‚úÖ È´òÁ≤æÂ∫¶Ëß£Êûê„Ç®„É≥„Ç∏„É≥Ê∫ñÂÇôÂÆå‰∫Ü',
          'fallback-ready': '‚ö° ËªΩÈáèËß£Êûê„Ç®„É≥„Ç∏„É≥Ê∫ñÂÇôÂÆå‰∫Ü',
          'basic-ready': 'üõ°Ô∏è Âü∫Êú¨Ëß£Êûê„Ç®„É≥„Ç∏„É≥Ê∫ñÂÇôÂÆå‰∫Ü',
          'error': '‚ö†Ô∏è Ëß£Êûê„Ç®„É≥„Ç∏„É≥ÂàùÊúüÂåñ„Ç®„É©„Éº - Âü∫Êú¨Ê©üËÉΩ„ÅßÁ∂ôÁ∂ö'
        };
        
        const message = statusMessages[status] || status;
        console.log(`üé≠ [KuromojiInitializer] ${message}`);
        
        // UIÈÄöÁü•„Åå„ÅÇ„Çå„Å∞Êõ¥Êñ∞
        this.updateStatusUI(message);
      },
      
      updateStatusUI(message) {
        const statusElement = document.getElementById('kuromoji-status');
        if (statusElement) {
          statusElement.textContent = message;
        }
      },
      
      showAnalysisQuality(analysis) {
        const qualityIndicators = {
          'high': 'üéØ È´òÁ≤æÂ∫¶Ëß£Êûê',
          'medium': '‚ö° ÈÅ©ÂøúÁöÑËß£Êûê',
          'basic': 'üõ°Ô∏è Âü∫Êú¨Ëß£Êûê',
          'none': 'üìù „ÉÜ„Ç≠„Çπ„ÉàÂá¶ÁêÜ„ÅÆ„Åø'
        };
        
        const indicator = qualityIndicators[analysis.quality];
        if (indicator) {
          console.log(`üìä [KuromojiInitializer] ${indicator} (${analysis.method})`);
        }
      }
    };
    
    // Safe Mode OS (Emergency Fallback)
    this.safeMode = {
      name: 'Kuromoji Safe Mode OS',
      active: false,
      
      activate() {
        console.log('üõ°Ô∏è [OfflineKuromojiInitializer] Safe Mode Ëµ∑Âãï');
        this.active = true;
        
        // ÊúÄÂ∞èÈôê„ÅÆËß£ÊûêÊ©üËÉΩ„ÅÆ„ÅøÊèê‰æõ
        return {
          basicAnalysis: true,
          advancedFeatures: false,
          philosophy: 'bunenjin-essential'
        };
      },
      
      basicAnalyze(text) {
        return {
          tokens: text.split(/\s+/).map(word => ({
            surface_form: word,
            pos: 'ÂêçË©û',
            method: 'safe_mode'
          })),
          quality: 'safe',
          philosophy: 'bunenjin-safe'
        };
      }
    };
    
    console.log('‚úÖ [OfflineKuromojiInitializer] Triple OS Architecture Ê∫ñÂÇôÂÆå‰∫Ü');
  }
  
  async connectToOfflineDetector() {
    console.log('üîó [OfflineKuromojiInitializer] „Ç™„Éï„É©„Ç§„É≥Ê§úÂá∫Âô®ÈÄ£Êê∫');
    
    if (window.OfflineDetector) {
      this.connectionDetector = window.OfflineDetector;
      
      // Êé•Á∂öÁä∂ÊÖãÂ§âÂåñ„É™„Çπ„Éä„Éº
      document.addEventListener('connection-status-change', (event) => {
        this.handleConnectionChange(event.detail);
      });
    }
  }
  
  handleConnectionChange(statusDetail) {
    const currentStatus = statusDetail.current;
    
    console.log('üì° [OfflineKuromojiInitializer] Êé•Á∂öÁä∂ÊÖãÂ§âÂåñ:', currentStatus.type);
    
    // Bunenjin Philosophy: Êé•Á∂öÁä∂ÊÖã„Å´Âøú„Åò„Å¶ÈÅ©Âøú
    if (currentStatus.type === 'offline') {
      this.prioritizeOfflineCapabilities();
    } else if (currentStatus.type === 'online' && !this.tokenizer) {
      this.attemptKuromojiInitialization();
    }
  }
  
  prioritizeOfflineCapabilities() {
    console.log('üì¥ [OfflineKuromojiInitializer] „Ç™„Éï„É©„Ç§„É≥ËÉΩÂäõÂÑ™ÂÖà„É¢„Éº„Éâ');
    
    // „Ç™„Éï„É©„Ç§„É≥ÊôÇ„ÅØËªΩÈáè„Å™„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØËß£Êûê„ÇíÊúÄÈÅ©Âåñ
    if (!this.fallbackAnalyzer) {
      this.prepareFallbackAnalyzer();
    }
  }
  
  async attemptKuromojiInitialization() {
    console.log('üîÑ [OfflineKuromojiInitializer] KuromojiÂàùÊúüÂåñË©¶Ë°å');
    
    this.interfaceOS.showInitializationStatus('kuromoji-loading');
    
    const initializationStrategies = [
      () => this.initializeFromCDN(),
      () => this.initializeFromLocalCache(),
      () => this.initializeMinimalVersion()
    ];
    
    for (const strategy of initializationStrategies) {
      try {
        await strategy();
        if (this.tokenizer) {
          this.interfaceOS.showInitializationStatus('kuromoji-ready');
          return true;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è KuromojiÂàùÊúüÂåñÊà¶Áï•Â§±Êïó:', error);
      }
    }
    
    console.log('üìù [OfflineKuromojiInitializer] KuromojiÂàùÊúüÂåñÂ§±Êïó - „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ΩøÁî®');
    return false;
  }
  
  async initializeFromCDN() {
    return new Promise((resolve, reject) => {
      if (typeof kuromoji === 'undefined') {
        reject(new Error('Kuromoji script not loaded'));
        return;
      }
      
      kuromoji.builder({
        dicPath: 'https://cdn.jsdelivr.net/npm/kuromoji@0.1.2/dict/'
      }).build((err, tokenizer) => {
        if (err) {
          reject(err);
        } else {
          this.tokenizer = tokenizer;
          window.tokenizer = tokenizer; // Global access
          console.log('‚úÖ [OfflineKuromojiInitializer] CDN„Åã„Çâ„ÅÆÂàùÊúüÂåñÊàêÂäü');
          resolve();
        }
      });
    });
  }
  
  async initializeFromLocalCache() {
    // „É≠„Éº„Ç´„É´„Ç≠„É£„ÉÉ„Ç∑„É•„Åã„Çâ„ÅÆÂàùÊúüÂåñÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÔºâ
    console.log('üíæ [OfflineKuromojiInitializer] „É≠„Éº„Ç´„É´„Ç≠„É£„ÉÉ„Ç∑„É•ÂàùÊúüÂåñ - Êú™ÂÆüË£Ö');
    throw new Error('Local cache initialization not implemented');
  }
  
  async initializeMinimalVersion() {
    // ÊúÄÂ∞èÈôêÁâà„ÅÆÂàùÊúüÂåñÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÔºâ
    console.log('‚ö° [OfflineKuromojiInitializer] ËªΩÈáèÁâàÂàùÊúüÂåñ - Êú™ÂÆüË£Ö');
    throw new Error('Minimal version not available');
  }
  
  async prepareFallbackAnalyzer() {
    console.log('üîß [OfflineKuromojiInitializer] „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØËß£ÊûêÂô®Ê∫ñÂÇô');
    
    this.fallbackAnalyzer = {
      name: 'Advanced Fallback Analyzer',
      version: '1.0.0',
      
      patterns: {
        // Êó•Êú¨Ë™û„ÅÆÂìÅË©û„Éë„Çø„Éº„É≥
        verb_endings: ['„Çã', '„Åô', '„Åè', '„Åê', '„ÇÄ', '„Å¨', '„Å∂', '„Å§', '„ÅÜ'],
        adjective_endings: ['„ÅÑ', '„Åó„ÅÑ', '„Çâ„Åó„ÅÑ', '„Å£„ÅΩ„ÅÑ'],
        adverb_patterns: ['„Å´', '„Åè', '„Å®', '„Å£„Å®', '„Çä„Å®']
      },
      
      commonWords: new Set([
        '„ÅØ', '„Åå', '„Çí', '„Å´', '„Åß', '„Å®', '„Åã„Çâ', '„Åæ„Åß', '„ÅÆ',
        '„Å†', '„Åß„ÅÇ„Çã', '„Åß„Åô', '„Åæ„Åô', '„Åß„Åó„Çá„ÅÜ',
        '„Åì„ÅÆ', '„Åù„ÅÆ', '„ÅÇ„ÅÆ', '„Å©„ÅÆ',
        'ÁßÅ', '„ÅÇ„Å™„Åü', 'ÂΩº', 'ÂΩºÂ•≥', '„Åì„Çå', '„Åù„Çå', '„ÅÇ„Çå'
      ]),
      
      ready: true
    };
    
    this.interfaceOS.showInitializationStatus('fallback-ready');
  }
  
  async setupOfflineCache() {
    console.log('üíæ [OfflineKuromojiInitializer] „Ç™„Éï„É©„Ç§„É≥„Ç≠„É£„ÉÉ„Ç∑„É•Ë®≠ÂÆö');
    
    // Á∞°Êòì„Ç≠„É£„ÉÉ„Ç∑„É•„Ç∑„Çπ„ÉÜ„É†
    this.offlineCache = {
      analysisResults: new Map(),
      maxSize: 1000,
      
      get(text) {
        return this.analysisResults.get(text);
      },
      
      set(text, result) {
        if (this.analysisResults.size >= this.maxSize) {
          const firstKey = this.analysisResults.keys().next().value;
          this.analysisResults.delete(firstKey);
        }
        this.analysisResults.set(text, result);
      },
      
      clear() {
        this.analysisResults.clear();
      }
    };
  }
  
  activateFallbackMode() {
    console.log('üõ°Ô∏è [OfflineKuromojiInitializer] „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„É¢„Éº„ÉâËµ∑Âãï');
    
    this.safeMode.activate();
    this.status = 'fallback-ready';
    this.initialized = true;
    
    this.interfaceOS.showInitializationStatus('basic-ready');
  }
  
  // Public API
  async analyze(text) {
    if (!this.initialized) {
      await this.init();
    }
    
    try {
      // „Ç≠„É£„ÉÉ„Ç∑„É•„ÉÅ„Çß„ÉÉ„ÇØ
      if (this.offlineCache) {
        const cached = this.offlineCache.get(text);
        if (cached) {
          console.log('üíæ [OfflineKuromojiInitializer] „Ç≠„É£„ÉÉ„Ç∑„É•„Éí„ÉÉ„Éà');
          return cached;
        }
      }
      
      // Ëß£ÊûêÂÆüË°å
      let result;
      if (this.safeMode.active) {
        result = this.safeMode.basicAnalyze(text);
      } else {
        result = await this.engineOS.analyzeText(text);
      }
      
      // ÁµêÊûú„Çí„Ç≠„É£„ÉÉ„Ç∑„É•
      if (this.offlineCache && result.quality !== 'none') {
        this.offlineCache.set(text, result);
      }
      
      // UIÂèçÊò†
      this.interfaceOS.showAnalysisQuality(result);
      
      return result;
      
    } catch (error) {
      console.error('‚ùå [OfflineKuromojiInitializer] Ëß£Êûê„Ç®„É©„Éº:', error);
      
      // Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      return this.safeMode.basicAnalyze(text);
    }
  }
  
  getStatus() {
    return {
      initialized: this.initialized,
      status: this.status,
      hasKuromoji: !!this.tokenizer,
      hasFallback: !!this.fallbackAnalyzer,
      safeModeActive: this.safeMode?.active || false,
      philosophy: 'bunenjin',
      architecture: 'triple-os'
    };
  }
  
  getCapabilities() {
    const capabilities = ['basic_analysis'];
    
    if (this.tokenizer) {
      capabilities.push('high_precision_morphology', 'detailed_pos_tagging', 'reading_estimation');
    }
    
    if (this.fallbackAnalyzer) {
      capabilities.push('pattern_based_analysis', 'word_segmentation');
    }
    
    if (this.offlineCache) {
      capabilities.push('result_caching');
    }
    
    return capabilities;
  }
  
  clearCache() {
    if (this.offlineCache) {
      this.offlineCache.clear();
      console.log('üóëÔ∏è [OfflineKuromojiInitializer] „Ç≠„É£„ÉÉ„Ç∑„É•„ÇØ„É™„Ç¢ÂÆå‰∫Ü');
    }
  }
}

// Global instance with Bunenjin Philosophy
if (typeof window !== 'undefined') {
  window.OfflineKuromojiInitializer = new OfflineKuromojiInitializer();
  
  // Global morphological analysis function
  window.analyzeText = async function(text) {
    if (window.OfflineKuromojiInitializer) {
      return await window.OfflineKuromojiInitializer.analyze(text);
    } else {
      return { tokens: [], error: 'Analyzer not available' };
    }
  };
}

console.log('‚úÖ [OfflineKuromojiInitializer] Bunenjin Philosophy Implementation Loaded');