class DictionaryLazyLoader{constructor(){this.loadedDictionaries=new Set,this.loadingPromises=new Map,this.config={baseUrl:"/dict/",cdnUrl:"https://cdn.jsdelivr.net/npm/kuromoji@0.1.2/dict/",fallbackEnabled:!0,cacheEnabled:!0},this.metrics={loadTimes:{},cacheHits:0,totalRequests:0},console.log("📚 DictionaryLazyLoader initialized - On-demand loading ready")}async loadDictionary(t,e={}){const{priority:i="normal",timeout:o=15e3,retryCount:a=2}=e,r=performance.now();if(this.metrics.totalRequests++,this.loadedDictionaries.has(t))return this.metrics.cacheHits++,console.log(`📚 Dictionary already loaded: ${t}`),!0;if(this.loadingPromises.has(t))return console.log(`📚 Dictionary loading in progress: ${t}`),await this.loadingPromises.get(t);const s=this.performDictionaryLoad(t,e);this.loadingPromises.set(t,s);try{const e=await s,i=performance.now()-r;return this.metrics.loadTimes[t]=i,e&&(this.loadedDictionaries.add(t),console.log(`✅ Dictionary loaded successfully: ${t} (${i.toFixed(2)}ms)`)),e}catch(n){return console.error(`❌ Dictionary load failed: ${t}`,n),!1}finally{this.loadingPromises.delete(t)}}async performDictionaryLoad(t,e){const{timeout:i=15e3,retryCount:o=2}=e;try{return await this.loadFromLocal(t,i)}catch(a){if(console.warn(`⚠️ Local dictionary load failed: ${t}`,a),!this.config.fallbackEnabled)throw a;try{return await this.loadFromCDN(t,i)}catch(r){throw console.error(`❌ CDN dictionary load failed: ${t}`,r),r}}}async loadFromLocal(t,e){const i=`${this.config.baseUrl}${t}.dat.gz`;return new Promise((o,a)=>{const r=setTimeout(()=>{a(new Error(`Dictionary load timeout: ${t}`))},e);fetch(i).then(t=>{if(!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);return t.arrayBuffer()}).then(e=>{clearTimeout(r),this.cacheDictionary(t,e),o(!0)}).catch(t=>{clearTimeout(r),a(t)})})}async loadFromCDN(t,e){const i=`${this.config.cdnUrl}${t}.dat.gz`;return new Promise((o,a)=>{const r=setTimeout(()=>{a(new Error(`CDN dictionary load timeout: ${t}`))},e);fetch(i).then(t=>{if(!t.ok)throw new Error(`CDN HTTP ${t.status}: ${t.statusText}`);return t.arrayBuffer()}).then(e=>{clearTimeout(r),this.cacheDictionary(t,e),o(!0)}).catch(t=>{clearTimeout(r),a(t)})})}cacheDictionary(t,e){this.config.cacheEnabled&&console.log(`💾 Dictionary cached: ${t} (${e.byteLength} bytes)`)}async loadEssentialDictionaries(){console.log("📚 Loading essential dictionaries...");const t=["unk","unk_pos","unk_char","unk_compat"],e=t.map(t=>this.loadDictionary(t,{priority:"high"})),i=(await Promise.allSettled(e)).filter(t=>"fulfilled"===t.status&&t.value).length;return console.log(`📚 Essential dictionaries loaded: ${i}/${t.length}`),i===t.length}async loadAdvancedDictionaries(){console.log("📚 Loading advanced dictionaries for full functionality...");const t=["base","cc","check","tid","tid_map","tid_pos"],e=["tid","tid_map","cc","check","base","tid_pos"],i=[];for(const r of e)try{const t=await this.loadDictionary(r,{priority:"normal",timeout:3e4});i.push(t),console.log(`📚 Progress: ${i.filter(Boolean).length}/${e.length} advanced dictionaries loaded`)}catch(a){console.warn(`⚠️ Advanced dictionary load failed: ${r}`,a),i.push(!1)}const o=i.filter(Boolean).length;return console.log(`📚 Advanced dictionaries loaded: ${o}/${t.length}`),o>=Math.ceil(.7*t.length)}isMorphologicalAnalysisReady(){return["unk","unk_pos"].every(t=>this.loadedDictionaries.has(t))}isFullAnalysisReady(){return["base","cc","check","tid","tid_map","tid_pos"].every(t=>this.loadedDictionaries.has(t))}getMetrics(){return{...this.metrics,loadedDictionaries:Array.from(this.loadedDictionaries),totalLoadTime:Object.values(this.metrics.loadTimes).reduce((t,e)=>t+e,0),averageLoadTime:Object.values(this.metrics.loadTimes).length>0?Object.values(this.metrics.loadTimes).reduce((t,e)=>t+e,0)/Object.values(this.metrics.loadTimes).length:0,cacheHitRate:this.metrics.totalRequests>0?this.metrics.cacheHits/this.metrics.totalRequests:0}}reset(){this.loadedDictionaries.clear(),this.loadingPromises.clear(),this.metrics={loadTimes:{},cacheHits:0,totalRequests:0},console.log("📚 DictionaryLazyLoader reset")}}window.DictionaryLazyLoader=DictionaryLazyLoader,"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{window.dictionaryLoader=new DictionaryLazyLoader}):window.dictionaryLoader=new DictionaryLazyLoader;