console.log("📡 OfflineDetector Loading with HaQei Philosophy..."),window.OfflineDetector={initialized:!1,connectionStatus:{online:navigator.onLine,lastCheck:Date.now(),reliability:1,speed:"unknown",quality:"unknown"},haqeiAdaptation:{harmony:{graceful_degradation:!0,smooth_transitions:!0,user_notification:"gentle"},compassion:{preserve_user_work:!0,minimize_disruption:!0,provide_alternatives:!0},wisdom:{learn_from_patterns:!0,predictive_preparation:!0,contextual_adaptation:!0},authenticity:{honest_status:!0,transparent_limitations:!0,accurate_feedback:!0}},listeners:new Set,async init(){console.log("🚀 OfflineDetector initializing with HaQei principles...");try{this.setupEventListeners(),this.setupPeriodicChecks(),this.initializeAdaptationStrategies(),await this.performInitialConnectivityTest(),this.initialized=!0,console.log("✅ OfflineDetector initialized with HaQei philosophy")}catch(t){console.error("❌ OfflineDetector initialization failed:",t),this.handleInitializationFailure(t)}},setupEventListeners(){console.log("🔧 Setting up connectivity event listeners..."),window.addEventListener("online",this.handleOnlineEvent.bind(this)),window.addEventListener("offline",this.handleOfflineEvent.bind(this)),document.addEventListener("visibilitychange",this.handleVisibilityChange.bind(this)),"connection"in navigator&&navigator.connection.addEventListener("change",this.handleConnectionChange.bind(this)),console.log("✅ Event listeners setup complete")},setupPeriodicChecks(){console.log("⏰ Setting up periodic connectivity checks..."),this.periodicCheckInterval=setInterval(()=>{this.performConnectivityCheck()},3e4),this.qualityCheckInterval=setInterval(()=>{this.performQualityCheck()},3e5),console.log("✅ Periodic checks setup complete")},initializeAdaptationStrategies(){console.log("🧠 Initializing HaQei adaptation strategies..."),this.adaptationStrategies={harmoniousDegradation:{enabled:!0,preserveCore:!0,maintainUX:!0,smoothTransition:!0},compassionateHandling:{preserveWork:!0,gentleNotifications:!0,provideAlternatives:!0,minimizeAnxiety:!0},wisdomBasedPrediction:{patternLearning:!0,proactivePreparation:!0,contextualAdaptation:!0,intelligentRetry:!0},authenticCommunication:{honestFeedback:!0,accurateStatus:!0,transparentLimitations:!0,reliableUpdates:!0}},console.log("✅ Adaptation strategies initialized")},async performInitialConnectivityTest(){console.log("🔍 Performing initial connectivity test...");try{const t=await this.testConnectivity();this.updateConnectionStatus(t),console.log("✅ Initial connectivity test complete: "+(t.online?"ONLINE":"OFFLINE"))}catch(t){console.warn("⚠️ Initial connectivity test failed:",t),this.connectionStatus.reliability=.5}},async testConnectivity(t=5e3){const e=[this.testWithFetch(),this.testWithImage(),this.testWithPing()];try{const i=(await Promise.allSettled(e.map(e=>this.withTimeout(e,t)))).filter(t=>"fulfilled"===t.status).length;return{online:i>0,reliability:i/e.length,timestamp:Date.now(),method:"comprehensive_test"}}catch(i){return{online:!1,reliability:0,timestamp:Date.now(),method:"test_failed",error:i.message}}},async testWithFetch(){const t=new AbortController,e=setTimeout(()=>t.abort(),3e3);try{const i=await fetch("/favicon.ico",{method:"HEAD",cache:"no-cache",signal:t.signal});return clearTimeout(e),i.ok}catch(i){throw clearTimeout(e),i}},testWithImage:async()=>new Promise((t,e)=>{const i=new Image,n=setTimeout(()=>{e(new Error("Image load timeout"))},3e3);i.onload=()=>{clearTimeout(n),t(!0)},i.onerror=()=>{clearTimeout(n),e(new Error("Image load failed"))},i.src=`/favicon.ico?t=${Date.now()}`}),async testWithPing(){if("connection"in navigator&&navigator.connection.rtt)return navigator.connection.rtt<2e3;const t=performance.now();await this.testWithFetch();return performance.now()-t<5e3},withTimeout:(t,e)=>Promise.race([t,new Promise((t,i)=>setTimeout(()=>i(new Error("Operation timeout")),e))]),updateConnectionStatus(t){const e=this.connectionStatus.online;this.connectionStatus={...this.connectionStatus,online:t.online,lastCheck:t.timestamp,reliability:t.reliability,method:t.method},e!==t.online&&this.handleStatusChange(e,t.online),this.updateQualityMetrics()},updateQualityMetrics(){if("connection"in navigator){const t=navigator.connection;this.connectionStatus.speed=t.effectiveType||"unknown","4g"===t.effectiveType||"3g"===t.effectiveType?this.connectionStatus.quality="good":"2g"===t.effectiveType?this.connectionStatus.quality="poor":this.connectionStatus.quality="unknown"}},handleOnlineEvent(t){console.log("🌐 Browser reported ONLINE status"),this.performConnectivityCheck().then(()=>{this.connectionStatus.online&&this.notifyListeners("online",{gentle:!0,message:"接続が復旧しました",haqei_principle:"compassion"})})},handleOfflineEvent(t){console.log("📵 Browser reported OFFLINE status"),this.connectionStatus.online=!1,this.connectionStatus.lastCheck=Date.now(),this.notifyListeners("offline",{graceful:!0,message:"オフラインモードに移行しました",haqei_principle:"harmony"})},handleVisibilityChange(t){!document.hidden&&this.initialized&&setTimeout(()=>{this.performConnectivityCheck()},1e3)},handleConnectionChange(t){console.log("📶 Network connection info changed"),this.updateQualityMetrics(),this.adaptToConnectionQuality()},handleStatusChange(t,e){const i=e?"online":"offline";console.log(`🔄 Connection status changed: ${t?"ONLINE":"OFFLINE"} → ${e?"ONLINE":"OFFLINE"}`),this.learnFromStatusChange(t,e),this.notifyListeners("statuschange",{previous:t,current:e,timestamp:Date.now(),haqei_adaptation:this.getAdaptationStrategy(i)})},learnFromStatusChange(t,e){this.connectionHistory||(this.connectionHistory=[]),this.connectionHistory.push({timestamp:Date.now(),previous:t,current:e,context:this.getCurrentContext()}),this.connectionHistory.length>100&&(this.connectionHistory=this.connectionHistory.slice(-50))},getCurrentContext(){return{page_visible:!document.hidden,time_of_day:(new Date).getHours(),connection_quality:this.connectionStatus.quality,user_activity:this.estimateUserActivity()}},estimateUserActivity(){const t=Date.now()-this.connectionStatus.lastCheck;return t<6e4?"active":t<3e5?"moderate":"idle"},adaptToConnectionQuality(){const t=this.connectionStatus.quality;this.notifyListeners("quality_adaptation",{quality:t,adaptation:{good:"high_performance_mode",poor:"conservation_mode",unknown:"balanced_mode"}[t]||"balanced_mode",haqei_principle:"wisdom"})},getAdaptationStrategy:t=>"offline"===t?{principle:"harmony",strategy:"graceful_degradation",actions:["preserve_user_data","enable_offline_features","queue_pending_operations","provide_gentle_notification"]}:{principle:"compassion",strategy:"smooth_restoration",actions:["restore_online_features","sync_offline_changes","resume_operations","confirm_restoration"]},async performConnectivityCheck(){if(this.initialized)try{const t=await this.testConnectivity();this.updateConnectionStatus(t)}catch(t){console.warn("⚠️ Periodic connectivity check failed:",t)}},async performQualityCheck(){if(this.connectionStatus.online)try{const t=await this.assessConnectionQuality();this.updateQualityMetrics(),this.notifyListeners("quality_check",{result:t,timestamp:Date.now()})}catch(t){console.warn("⚠️ Quality check failed:",t)}},async assessConnectionQuality(){const t=performance.now();try{await this.testWithFetch();const e=performance.now()-t;let i="good";return e>2e3?i="poor":e>1e3&&(i="moderate"),{latency:e,quality:i,timestamp:Date.now()}}catch(e){return{latency:-1,quality:"poor",error:e.message,timestamp:Date.now()}}},handleInitializationFailure(t){console.error("💥 OfflineDetector initialization failed:",t),this.connectionStatus={online:navigator.onLine,lastCheck:Date.now(),reliability:.3,speed:"unknown",quality:"unknown",fallback_mode:!0},this.initialized=!0},addListener(t){if("function"==typeof t)return this.listeners.add(t),()=>this.listeners.delete(t)},removeListener(t){this.listeners.delete(t)},notifyListeners(t,e){this.listeners.forEach(i=>{try{i({type:t,data:e,timestamp:Date.now(),philosophy:"haqei"})}catch(n){console.error("⚠️ Listener notification failed:",n)}})},isOnline(){return this.connectionStatus.online},getConnectionQuality(){return{online:this.connectionStatus.online,quality:this.connectionStatus.quality,speed:this.connectionStatus.speed,reliability:this.connectionStatus.reliability,lastCheck:this.connectionStatus.lastCheck}},async forceCheck(){return console.log("🔍 Forced connectivity check requested"),await this.performConnectivityCheck()},getHaQeiAdaptation(){return{philosophy:this.haqeiAdaptation,current_strategy:this.getAdaptationStrategy(this.connectionStatus.online?"online":"offline"),connection_history:this.connectionHistory?.slice(-10)||[]}},cleanup(){this.periodicCheckInterval&&clearInterval(this.periodicCheckInterval),this.qualityCheckInterval&&clearInterval(this.qualityCheckInterval),window.removeEventListener("online",this.handleOnlineEvent.bind(this)),window.removeEventListener("offline",this.handleOfflineEvent.bind(this)),document.removeEventListener("visibilitychange",this.handleVisibilityChange.bind(this)),"connection"in navigator&&navigator.connection.removeEventListener("change",this.handleConnectionChange.bind(this)),this.listeners.clear(),console.log("🧹 OfflineDetector cleanup complete")}},document.addEventListener("DOMContentLoaded",()=>{window.OfflineDetector.init()}),window.addEventListener("beforeunload",()=>{window.OfflineDetector&&window.OfflineDetector.cleanup()}),console.log("✅ OfflineDetector loaded with HaQei Philosophy");