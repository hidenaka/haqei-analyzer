class QuestionScreenOptimizer{constructor(){this.selectors={screens:{welcome:"#welcome-screen",question:"#question-screen",analysis:"#analysis-screen",results:"#results-screen"},questionElements:{container:"#question-container",number:".question-number",text:".question-text",options:".answer-options",option:".answer-option",radioInput:'input[type="radio"]',selectedRadio:'input[type="radio"]:checked'},navigation:{nextButton:"#next-button",prevButton:"#prev-button",submitButton:"#submit-button",progressBar:".progress-bar",progressFill:".progress-fill"},playwright:{questionScreen:'[data-testid="question-screen"]',questionContainer:'[data-testid="question-container"]',answerOption:'[data-testid="answer-option"]',nextButton:'[data-testid="next-button"]',submitButton:'[data-testid="submit-button"]'}},this.optimizations={debounceDelay:150,transitionDuration:300,preloadQuestions:3,cacheResponses:!0},this.cache=new Map}optimizeQuestionScreen(){return this.addTestIds(),this.optimizeEventListeners(),this.optimizeRendering(),this.improveAccessibility(),{success:!0,selectors:this.selectors,optimizations:this.optimizations}}addTestIds(){[{selector:"#welcome-screen",testId:"welcome-screen"},{selector:"#question-screen",testId:"question-screen"},{selector:"#analysis-screen",testId:"analysis-screen"},{selector:"#results-screen",testId:"results-screen"}].forEach(e=>{const t=document.querySelector(e.selector);t&&t.setAttribute("data-testid",e.testId)});[{selector:"#question-container",testId:"question-container"},{selector:".question-number",testId:"question-number"},{selector:".question-text",testId:"question-text"}].forEach(e=>{const t=document.querySelector(e.selector);t&&t.setAttribute("data-testid",e.testId)}),document.querySelectorAll(".answer-option").forEach((e,t)=>{e.setAttribute("data-testid",`answer-option-${t}`),e.setAttribute("data-value",e.querySelector("input")?.value||"")});[{selector:"#next-button",testId:"next-button"},{selector:"#prev-button",testId:"prev-button"},{selector:"#submit-button",testId:"submit-button"}].forEach(e=>{const t=document.querySelector(e.selector);t&&(t.setAttribute("data-testid",e.testId),t.setAttribute("aria-label",e.testId.replace("-"," ")))})}optimizeEventListeners(){new Map;(()=>{const e=document.querySelector("#question-container");e&&e.addEventListener("click",e=>{const t=e.target.closest(".answer-option");if(!t)return;const s=t.querySelector('input[type="radio"]');s&&!s.checked&&(s.checked=!0,s.dispatchEvent(new Event("change",{bubbles:!0})))},{passive:!0})})(),(()=>{document.addEventListener("keydown",e=>{if(this.isQuestionScreenActive())switch(e.key){case"ArrowRight":case"Enter":this.handleNext();break;case"ArrowLeft":this.handlePrevious();break;case"1":case"2":case"3":case"4":case"5":this.selectAnswer(parseInt(e.key))}})})()}optimizeRendering(){this.optimizeQuestionDisplay=e=>{const t=document.querySelector("#question-container");if(!t)return;const s=document.createDocumentFragment(),n=document.createElement("div");n.className="question-number",n.setAttribute("data-testid","question-number"),n.textContent=`質問 ${e.number} / ${e.total}`,s.appendChild(n);const i=document.createElement("div");i.className="question-text",i.setAttribute("data-testid","question-text"),i.textContent=e.text,s.appendChild(i);const o=document.createElement("div");o.className="answer-options",o.setAttribute("data-testid","answer-options"),e.options.forEach((t,s)=>{const n=this.createOptionElement(t,s,e.id);o.appendChild(n)}),s.appendChild(o),requestAnimationFrame(()=>{t.innerHTML="",t.appendChild(s)})},this.optimizeProgressBar=e=>{const t=document.querySelector(".progress-fill");t&&(t.style.transition=`width ${this.optimizations.transitionDuration}ms ease-out`,t.style.width=`${e}%`)}}createOptionElement(e,t,s){const n=document.createElement("label");n.className="answer-option",n.setAttribute("data-testid",`answer-option-${t}`),n.setAttribute("data-value",e.value);const i=document.createElement("input");i.type="radio",i.name=`question-${s}`,i.value=e.value,i.id=`q${s}-option-${t}`;const o=document.createElement("span");return o.className="option-text",o.textContent=e.text,n.appendChild(i),n.appendChild(o),n}improveAccessibility(){const addAriaAttributes=()=>{const e=document.querySelector("#question-container");e&&(e.setAttribute("role","form"),e.setAttribute("aria-label","質問フォーム"));const t=document.querySelector(".progress-bar");t&&(t.setAttribute("role","progressbar"),t.setAttribute("aria-valuemin","0"),t.setAttribute("aria-valuemax","100")),document.querySelectorAll("button").forEach(e=>{e.getAttribute("aria-label")||e.setAttribute("aria-label",e.textContent)})};addAriaAttributes();const e=new MutationObserver(()=>{addAriaAttributes()}),t=document.querySelector("#question-screen");t&&e.observe(t,{childList:!0,subtree:!0})}isQuestionScreenActive(){const e=document.querySelector("#question-screen");return e&&e.classList.contains("active")}handleNext(){const e=document.querySelector("#next-button");e&&!e.disabled&&e.click()}handlePrevious(){const e=document.querySelector("#prev-button");e&&!e.disabled&&e.click()}selectAnswer(e){const t=document.querySelector(`.answer-option input[value="${e}"]`);t&&(t.checked=!0,t.dispatchEvent(new Event("change",{bubbles:!0})))}generatePlaywrightHelpers(){return`\n// Playwright Helper Functions for OS Analyzer\n\nclass OSAnalyzerTestHelper {\n    constructor(page) {\n        this.page = page;\n        this.selectors = ${JSON.stringify(this.selectors.playwright,null,2)};\n    }\n    \n    async waitForQuestionScreen() {\n        await this.page.waitForSelector(this.selectors.questionScreen, {\n            state: 'visible',\n            timeout: 10000\n        });\n    }\n    \n    async answerQuestion(value) {\n        const optionSelector = \`\${this.selectors.answerOption}[data-value="\${value}"]\`;\n        await this.page.click(optionSelector);\n    }\n    \n    async answerAllQuestions(answers) {\n        for (let i = 0; i < answers.length; i++) {\n            await this.answerQuestion(answers[i]);\n            \n            if (i < answers.length - 1) {\n                await this.page.click(this.selectors.nextButton);\n                await this.page.waitForTimeout(300); // アニメーション待機\n            } else {\n                await this.page.click(this.selectors.submitButton);\n            }\n        }\n    }\n    \n    async getQuestionText() {\n        return await this.page.textContent('[data-testid="question-text"]');\n    }\n    \n    async getProgress() {\n        const progressFill = await this.page.locator('.progress-fill');\n        const width = await progressFill.evaluate(el => el.style.width);\n        return parseFloat(width);\n    }\n}\n\nmodule.exports = { OSAnalyzerTestHelper };\n        `}validateSelectors(){const e={valid:[],missing:[],suggestions:[]};return Object.entries(this.selectors).forEach(([t,s])=>{"playwright"!==t&&Object.entries(s).forEach(([s,n])=>{if(document.querySelector(n))e.valid.push({category:t,key:s,selector:n});else{e.missing.push({category:t,key:s,selector:n});const i=this.suggestAlternativeSelector(n);i&&e.suggestions.push({original:n,suggested:i})}})}),e}suggestAlternativeSelector(e){if(e.startsWith("#")){return`[data-testid="${e.substring(1)}"]`}if(e.startsWith(".")){return`[class*="${e.substring(1)}"]`}return null}}"undefined"!=typeof module&&module.exports&&(module.exports=QuestionScreenOptimizer);