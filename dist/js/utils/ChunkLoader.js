class ChunkLoader{constructor(t={}){this.options={chunkSize:65536,enableCaching:!0,enablePrefetch:!0,enableCompression:!1,maxConcurrentLoads:3,...t},this.chunks=new Map,this.loadingChunks=new Set,this.loadQueue=[],this.cache=new Map,this.dataRegistry={hexagrams:{totalChunks:8,chunkSize:8,loadedChunks:new Set,baseUrl:"/js/data/chunks/"},h384:{totalChunks:6,chunkSize:64,loadedChunks:new Set,baseUrl:"/js/data/h384-chunks/"},compatibility:{totalChunks:4,chunkSize:16,loadedChunks:new Set,baseUrl:"/js/data/compatibility/chunks/"}},this.stats={chunksLoaded:0,totalLoadTime:0,cacheHits:0,bytesLoaded:0,averageChunkSize:0},console.log("🧩 ChunkLoader initialized - Data chunking system ready")}async loadChunks(t,e=[]){if(!this.dataRegistry[t])throw new Error(`Unknown data type: ${t}`);this.dataRegistry[t];const a=performance.now();console.log(`🧩 Loading ${t} chunks:`,e);try{const s=e.map(e=>this.loadChunk(t,e)),o=await this.limitConcurrency(s,this.options.maxConcurrentLoads),n=performance.now()-a;return this.updateStats(o,n),console.log(`✅ Loaded ${o.length} ${t} chunks in ${n.toFixed(0)}ms`),o}catch(s){throw console.error(`❌ Failed to load ${t} chunks:`,s),s}}async loadChunk(t,e){const a=this.dataRegistry[t],s=`${t}_${e}`;if(this.options.enableCaching&&this.cache.has(s))return this.stats.cacheHits++,console.log(`📦 Chunk loaded from cache: ${s}`),this.cache.get(s);if(this.loadingChunks.has(s))return new Promise((t,e)=>{const checkLoaded=()=>{this.cache.has(s)?t(this.cache.get(s)):this.loadingChunks.has(s)?setTimeout(checkLoaded,50):e(new Error(`Chunk loading failed: ${s}`))};checkLoaded()});this.loadingChunks.add(s);try{const o=this.getChunkUrl(t,e),n=await this.fetchChunk(o);return this.options.enableCaching&&this.cache.set(s,n),a.loadedChunks.add(e),this.stats.chunksLoaded++,n}finally{this.loadingChunks.delete(s)}}getChunkUrl(t,e){return`${this.dataRegistry[t].baseUrl}${t}_chunk_${e}.js`}async fetchChunk(t){try{const e=await import(t);return e.default||e}catch(e){try{const e=await fetch(t);if(!e.ok)throw new Error(`HTTP ${e.status}: ${e.statusText}`);const a=e.headers.get("content-type");if(a&&a.includes("application/json"))return await e.json();{const t=await e.text();return this.parseJavaScriptChunk(t)}}catch(a){throw console.error(`Failed to fetch chunk: ${t}`,a),a}}}parseJavaScriptChunk(t){try{const e={data:null,module:{exports:{}},exports:{}},a=new Function("module","exports","data",t+"; return data || module.exports || exports;");return a(e.module,e.exports,e.data)}catch(e){throw console.error("Failed to parse JavaScript chunk:",e),e}}async limitConcurrency(t,e){const a=[],s=[];for(const o of t){const t=Promise.resolve(o).then(e=>(s.splice(s.indexOf(t),1),e));a.push(t),s.push(t),s.length>=e&&await Promise.race(s)}return Promise.all(a)}async prefetchChunks(t,e="normal"){if(!this.options.enablePrefetch)return;const a=this.dataRegistry[t],s=[];for(let n=0;n<a.totalChunks;n++)a.loadedChunks.has(n)||s.push(n);if(0===s.length)return;console.log(`🔄 Prefetching ${t} chunks:`,s.slice(0,3));const o=s.slice(0,3);"low"===e&&"requestIdleCallback"in window?requestIdleCallback(()=>{this.loadChunks(t,o).catch(t=>{console.warn("Prefetch failed:",t)})}):setTimeout(()=>{this.loadChunks(t,o).catch(t=>{console.warn("Prefetch failed:",t)})},"high"===e?100:1e3)}async getHexagrams(t=1,e=64){const a=this.dataRegistry.hexagrams.chunkSize,s=Math.floor((t-1)/a),o=Math.floor((e-1)/a),n=[];for(let h=s;h<=o;h++)n.push(h);return(await this.loadChunks("hexagrams",n)).flat().filter(a=>a.hexagram_id>=t&&a.hexagram_id<=e)}async getH384Lines(t){const e=6*(t-1),a=e+6-1,s=this.dataRegistry.h384.chunkSize,o=Math.floor(e/s),n=Math.floor(a/s),h=[];for(let i=o;i<=n;i++)h.push(i);return(await this.loadChunks("h384",h)).flat().filter(e=>Math.floor((e.lineId-1)/6)+1===t)}async getCompatibility(t,e){const a=Math.floor((t-1)/16);return(await this.loadChunks("compatibility",[a]))[0][`${t}_${e}`]||null}predictiveLoad(t){({welcome:["hexagrams"],questions:["hexagrams","h384"],analysis:["h384","compatibility"],results:["compatibility"]}[t]||[]).forEach(t=>{this.prefetchChunks(t,"low")})}cleanup(){if(this.cache.size<=50)return;const t=Array.from(this.cache.entries()),e=t.slice(0,t.length-50);e.forEach(([t])=>{this.cache.delete(t),console.log(`🧹 Cleaned up chunk: ${t}`)}),console.log(`🧹 Cleaned up ${e.length} cached chunks`)}updateStats(t,e){this.stats.totalLoadTime+=e,t.forEach(t=>{if(t){const e=JSON.stringify(t).length;this.stats.bytesLoaded+=e}}),this.stats.averageChunkSize=this.stats.bytesLoaded/this.stats.chunksLoaded}getStats(){return{...this.stats,cacheHitRatio:this.stats.chunksLoaded>0?(this.stats.cacheHits/this.stats.chunksLoaded*100).toFixed(1)+"%":"0%",averageLoadTime:this.stats.chunksLoaded>0?(this.stats.totalLoadTime/this.stats.chunksLoaded).toFixed(0)+"ms":"0ms",memoryUsage:this.formatBytes(this.stats.bytesLoaded),cachedChunks:this.cache.size}}formatBytes(t){if(0===t)return"0 B";const e=Math.floor(Math.log(t)/Math.log(1024));return parseFloat((t/Math.pow(1024,e)).toFixed(2))+" "+["B","KB","MB"][e]}debugInfo(){console.log("🧩 ChunkLoader Debug Info:"),console.log("Registry:",this.dataRegistry),console.log("Cache size:",this.cache.size),console.log("Loading chunks:",Array.from(this.loadingChunks)),console.log("Statistics:",this.getStats())}}window.chunkLoader||(window.chunkLoader=new ChunkLoader({enableCaching:!0,enablePrefetch:!0,maxConcurrentLoads:3}),console.log("🎯 Global ChunkLoader initialized for data optimization"),window.getChunkStats=()=>window.chunkLoader.getStats(),window.debugChunkLoader=()=>window.chunkLoader.debugInfo()),"undefined"!=typeof module&&module.exports&&(module.exports=ChunkLoader);