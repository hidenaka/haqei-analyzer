name: Security Check and Audit

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # ÊØéÊó•ÂçàÂâç2ÊôÇÔºàUTCÔºâ„Å´ÂÆüË°å
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  dependency-security:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
    
    - name: Run npm audit (Main Project)
      run: |
        echo "::group::Main Project npm audit"
        npm audit --audit-level=moderate --production || true
        echo "::endgroup::"
    
    - name: Check for high/critical vulnerabilities
      run: |
        echo "Checking for critical vulnerabilities..."
        MAIN_AUDIT=$(npm audit --audit-level=high --json --production 2>/dev/null || echo '{"vulnerabilities":{}}')
        
        MAIN_VULNS=$(echo $MAIN_AUDIT | jq -r '.metadata.vulnerabilities.high // 0 + .metadata.vulnerabilities.critical // 0')
        
        echo "Main project high/critical vulnerabilities: $MAIN_VULNS"
        
        if [ "$MAIN_VULNS" -gt 0 ]; then
          echo "::warning::High or critical vulnerabilities detected. Please update dependencies."
        fi

  code-security:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run custom security audit
      run: |
        echo "Running HaQei Security Audit Suite..."
        node scripts/security-audit.js || echo "Security audit completed with warnings"
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-report
        path: security-reports/
        retention-days: 30

  secrets-scan:
    name: Secrets and Credentials Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run GitLeaks action
      uses: gitleaks/gitleaks-action@v2
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential hardcoded secrets..."
        
        # API „Ç≠„Éº„Éë„Çø„Éº„É≥„ÉÅ„Çß„ÉÉ„ÇØ
        if grep -r -i "api[_-]key\s*[:=]\s*['\"][a-zA-Z0-9]{20,}['\"]" --include="*.js" --include="*.html" --include="*.json" . ; then
          echo "::warning::Potential hardcoded API keys found"
        fi
        
        # Gemini API „Ç≠„Éº„ÉÅ„Çß„ÉÉ„ÇØ
        if grep -r -i "gemini.*key" --include="*.js" --include="*.html" . ; then
          echo "::warning::Potential Gemini API key references found"
        fi
        
        # Supabase „Ç≠„Éº„ÉÅ„Çß„ÉÉ„ÇØ
        if grep -r -i "supabase.*key" --include="*.js" --include="*.html" . ; then
          echo "::warning::Potential Supabase key references found"
        fi
        
        # ‰∏ÄËà¨ÁöÑ„Å™„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„Éë„Çø„Éº„É≥
        SECRET_PATTERNS=(
          "password\s*[:=]\s*['\"][^'\"]{8,}['\"]"
          "secret\s*[:=]\s*['\"][^'\"]{20,}['\"]"
          "token\s*[:=]\s*['\"][^'\"]{20,}['\"]"
        )
        
        for pattern in "${SECRET_PATTERNS[@]}"; do
          if grep -r -i -E "$pattern" --include="*.js" --include="*.html" . ; then
            echo "::warning::Potential secret found matching pattern: $pattern"
          fi
        done
        
        echo "Secrets scan completed"

  security-headers:
    name: Security Headers Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check security headers configuration
      run: |
        echo "Checking security headers configuration..."
        
        # staging.config.js „ÅÆÂ≠òÂú®Á¢∫Ë™ç
        if [ -f "staging.config.js" ]; then
          echo "‚úÖ staging.config.js found"
          
          # ÂøÖÈ†à„Çª„Ç≠„É•„É™„ÉÜ„Ç£„Éò„ÉÉ„ÉÄ„Éº„ÉÅ„Çß„ÉÉ„ÇØ
          REQUIRED_HEADERS=(
            "Content-Security-Policy"
            "X-Frame-Options"
            "X-Content-Type-Options"
            "Strict-Transport-Security"
            "Referrer-Policy"
            "Permissions-Policy"
          )
          
          for header in "${REQUIRED_HEADERS[@]}"; do
            if grep -q "$header" staging.config.js; then
              echo "‚úÖ $header configured"
            else
              echo "‚ö†Ô∏è $header not found in configuration"
            fi
          done
          
          # Âç±Èô∫„Å™Ë®≠ÂÆö„ÉÅ„Çß„ÉÉ„ÇØ
          if grep -q "'unsafe-eval'" staging.config.js; then
            echo "::warning::Dangerous CSP directive 'unsafe-eval' found"
          fi
          
          if grep -q "'unsafe-inline'" staging.config.js; then
            echo "::warning::CSP directive 'unsafe-inline' found - consider using nonce or hash"
          fi
          
        else
          echo "::warning::staging.config.js not found - security headers may not be configured"
        fi

  file-permissions:
    name: File Permissions and Sensitive Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        
        # Ê©üÂØÜ„Éï„Ç°„Ç§„É´„Éë„Çø„Éº„É≥
        SENSITIVE_PATTERNS=(
          "*.env"
          "*.key"
          "*.pem"
          "*.p12"
          "*.backup"
          "*.bak"
          "*secret*"
          "*private*"
        )
        
        FOUND_FILES=()
        
        for pattern in "${SENSITIVE_PATTERNS[@]}"; do
          while IFS= read -r -d '' file; do
            FOUND_FILES+=("$file")
          done < <(find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*" -print0)
        done
        
        if [ ${#FOUND_FILES[@]} -gt 0 ]; then
          echo "::warning::Potentially sensitive files found:"
          printf '%s\n' "${FOUND_FILES[@]}"
          echo "Please ensure these files are properly secured and not committed to version control"
        else
          echo "‚úÖ No sensitive files found"
        fi
    
    - name: Check .gitignore coverage
      run: |
        echo "Checking .gitignore coverage for sensitive patterns..."
        
        if [ -f ".gitignore" ]; then
          IGNORE_PATTERNS=(
            "*.env"
            "*.key"
            "*.pem"
            ".env.local"
            "config/secrets*"
          )
          
          for pattern in "${IGNORE_PATTERNS[@]}"; do
            if grep -q "$pattern" .gitignore; then
              echo "‚úÖ $pattern is ignored"
            else
              echo "‚ö†Ô∏è Consider adding $pattern to .gitignore"
            fi
          done
        else
          echo "::warning::.gitignore file not found"
        fi

  https-links:
    name: HTTPS and Secure Links Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for insecure HTTP links
      run: |
        echo "Checking for insecure HTTP links..."
        
        # HTTP „É™„É≥„ÇØ„ÉÅ„Çß„ÉÉ„ÇØ
        HTTP_LINKS=$(grep -r -n "http://" --include="*.html" --include="*.js" --include="*.css" . | grep -v "localhost" || true)
        
        if [ -n "$HTTP_LINKS" ]; then
          echo "::warning::Insecure HTTP links found:"
          echo "$HTTP_LINKS"
          echo "Consider upgrading to HTTPS where possible"
        else
          echo "‚úÖ No insecure HTTP links found"
        fi
        
        # mixed content „ÉÅ„Çß„ÉÉ„ÇØ
        MIXED_CONTENT=$(grep -r -n -i "src=[\"']http://" --include="*.html" . || true)
        
        if [ -n "$MIXED_CONTENT" ]; then
          echo "::warning::Potential mixed content issues found:"
          echo "$MIXED_CONTENT"
        else
          echo "‚úÖ No mixed content issues found"
        fi

  security-summary:
    name: Security Summary
    needs: [dependency-security, code-security, secrets-scan, security-headers, file-permissions, https-links]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download security report
      uses: actions/download-artifact@v4
      if: always()
      with:
        name: security-audit-report
        path: security-reports/
      continue-on-error: true
    
    - name: Security summary
      run: |
        echo "## üîí Security Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # „Ç∏„Éß„ÉñÁµêÊûú„ÅÆÁ¢∫Ë™ç
        if [ "${{ needs.dependency-security.result }}" = "success" ]; then
          echo "‚úÖ Dependency Security: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Dependency Security: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-security.result }}" = "success" ]; then
          echo "‚úÖ Code Security: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Code Security: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.secrets-scan.result }}" = "success" ]; then
          echo "‚úÖ Secrets Scan: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Secrets Scan: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-headers.result }}" = "success" ]; then
          echo "‚úÖ Security Headers: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Security Headers: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.file-permissions.result }}" = "success" ]; then
          echo "‚úÖ File Security: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå File Security: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.https-links.result }}" = "success" ]; then
          echo "‚úÖ HTTPS Links: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå HTTPS Links: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Security Report" >> $GITHUB_STEP_SUMMARY
        echo "Detailed security audit results are available in the artifacts." >> $GITHUB_STEP_SUMMARY
    
    - name: Notify on security issues
      if: always() && (needs.code-security.result == 'failure' || needs.secrets-scan.result == 'failure')
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          üö® Security issues detected in HaQei repository
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please review the security report and take immediate action for any critical issues.
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      continue-on-error: true